// @generated by protoc-gen-es v1.4.1
// @generated from file alt.proto (package NTALT, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message NTALT.Envelope
 */
export declare class Envelope extends Message<Envelope> {
  /**
   * @generated from oneof NTALT.Envelope.kind
   */
  kind: {
    /**
     * @generated from field: NTALT.GameAction game_action = 1;
     */
    value: GameAction;
    case: "gameAction";
  } | {
    /**
     * @generated from field: NTALT.LobbyAction lobby_action = 50;
     */
    value: LobbyAction;
    case: "lobbyAction";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Envelope>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Envelope";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Envelope;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Envelope;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Envelope;

  static equals(a: Envelope | PlainMessage<Envelope> | undefined, b: Envelope | PlainMessage<Envelope> | undefined): boolean;
}

/**
 * @generated from message NTALT.GameAction
 */
export declare class GameAction extends Message<GameAction> {
  /**
   * The c prefix stands for "client", which refers to this application
   * The s prefix stands for "server", which refers to the online Noita game server
   *
   * @generated from oneof NTALT.GameAction.action
   */
  action: {
    /**
     * @generated from field: NTALT.PlayerMove player_move = 1;
     */
    value: PlayerMove;
    case: "playerMove";
  } | {
    /**
     * @generated from field: NTALT.PlayerPosition player_position = 2;
     */
    value: PlayerPosition;
    case: "playerPosition";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerUpdate c_player_update = 3;
     */
    value: ClientPlayerUpdate;
    case: "cPlayerUpdate";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerUpdate s_player_update = 4;
     */
    value: ServerPlayerUpdate;
    case: "sPlayerUpdate";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerUpdateInventory c_player_update_inventory = 5;
     */
    value: ClientPlayerUpdateInventory;
    case: "cPlayerUpdateInventory";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerUpdateInventory s_player_update_inventory = 6;
     */
    value: ServerPlayerUpdateInventory;
    case: "sPlayerUpdateInventory";
  } | {
    /**
     * @generated from field: NTALT.ClientHostItemBank c_host_item_bank = 7;
     */
    value: ClientHostItemBank;
    case: "cHostItemBank";
  } | {
    /**
     * @generated from field: NTALT.ServerHostItemBank s_host_item_bank = 8;
     */
    value: ServerHostItemBank;
    case: "sHostItemBank";
  } | {
    /**
     * @generated from field: NTALT.ClientHostUserTake c_host_user_take = 9;
     */
    value: ClientHostUserTake;
    case: "cHostUserTake";
  } | {
    /**
     * @generated from field: NTALT.ServerHostUserTake s_host_user_take = 10;
     */
    value: ServerHostUserTake;
    case: "sHostUserTake";
  } | {
    /**
     * @generated from field: NTALT.ClientHostUserTakeGold c_host_user_take_gold = 11;
     */
    value: ClientHostUserTakeGold;
    case: "cHostUserTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ServerHostUserTakeGold s_host_user_take_gold = 12;
     */
    value: ServerHostUserTakeGold;
    case: "sHostUserTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddGold c_player_add_gold = 13;
     */
    value: ClientPlayerAddGold;
    case: "cPlayerAddGold";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddGold s_player_add_gold = 14;
     */
    value: ServerPlayerAddGold;
    case: "sPlayerAddGold";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerTakeGold c_player_take_gold = 15;
     */
    value: ClientPlayerTakeGold;
    case: "cPlayerTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerTakeGold s_player_take_gold = 16;
     */
    value: ServerPlayerTakeGold;
    case: "sPlayerTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem c_player_add_item = 17;
     */
    value: ClientPlayerAddItem;
    case: "cPlayerAddItem";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem s_player_add_item = 18;
     */
    value: ServerPlayerAddItem;
    case: "sPlayerAddItem";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerTakeItem c_player_take_item = 19;
     */
    value: ClientPlayerTakeItem;
    case: "cPlayerTakeItem";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerTakeItem s_player_take_item = 20;
     */
    value: ServerPlayerTakeItem;
    case: "sPlayerTakeItem";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerPickup c_player_pickup = 21;
     */
    value: ClientPlayerPickup;
    case: "cPlayerPickup";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerPickup s_player_pickup = 22;
     */
    value: ServerPlayerPickup;
    case: "sPlayerPickup";
  } | {
    /**
     * @generated from field: NTALT.ClientNemesisAbility c_nemesis_ability = 23;
     */
    value: ClientNemesisAbility;
    case: "cNemesisAbility";
  } | {
    /**
     * @generated from field: NTALT.ServerNemesisAbility s_nemesis_ability = 24;
     */
    value: ServerNemesisAbility;
    case: "sNemesisAbility";
  } | {
    /**
     * @generated from field: NTALT.ClientNemesisPickupItem c_nemesis_pickup_item = 25;
     */
    value: ClientNemesisPickupItem;
    case: "cNemesisPickupItem";
  } | {
    /**
     * @generated from field: NTALT.ServerNemesisPickupItem s_nemesis_pickup_item = 26;
     */
    value: ServerNemesisPickupItem;
    case: "sNemesisPickupItem";
  } | {
    /**
     * @generated from field: NTALT.ClientChat c_chat = 27;
     */
    value: ClientChat;
    case: "cChat";
  } | {
    /**
     * @generated from field: NTALT.ServerChat s_chat = 28;
     */
    value: ServerChat;
    case: "sChat";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerDeath c_player_death = 29;
     */
    value: ClientPlayerDeath;
    case: "cPlayerDeath";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerDeath s_player_death = 30;
     */
    value: ServerPlayerDeath;
    case: "sPlayerDeath";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerNewGamePlus c_player_new_game_plus = 31;
     */
    value: ClientPlayerNewGamePlus;
    case: "cPlayerNewGamePlus";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerNewGamePlus s_player_new_game_plus = 32;
     */
    value: ServerPlayerNewGamePlus;
    case: "sPlayerNewGamePlus";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerSecretHourglass c_player_secret_hourglass = 33;
     */
    value: ClientPlayerSecretHourglass;
    case: "cPlayerSecretHourglass";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerSecretHourglass s_player_secret_hourglass = 34;
     */
    value: ServerPlayerSecretHourglass;
    case: "sPlayerSecretHourglass";
  } | {
    /**
     * @generated from field: NTALT.ClientCustomModEvent c_custom_mod_event = 35;
     */
    value: ClientCustomModEvent;
    case: "cCustomModEvent";
  } | {
    /**
     * @generated from field: NTALT.ServerCustomModEvent s_custom_mod_event = 36;
     */
    value: ServerCustomModEvent;
    case: "sCustomModEvent";
  } | {
    /**
     * @generated from field: NTALT.ClientRespawnPenalty c_respawn_penalty = 37;
     */
    value: ClientRespawnPenalty;
    case: "cRespawnPenalty";
  } | {
    /**
     * @generated from field: NTALT.ServerRespawnPenalty s_respawn_penalty = 38;
     */
    value: ServerRespawnPenalty;
    case: "sRespawnPenalty";
  } | {
    /**
     * @generated from field: NTALT.ClientAngerySteve c_angery_steve = 39;
     */
    value: ClientAngerySteve;
    case: "cAngerySteve";
  } | {
    /**
     * @generated from field: NTALT.ServerAngerySteve s_angery_steve = 40;
     */
    value: ServerAngerySteve;
    case: "sAngerySteve";
  } | {
    /**
     * @generated from field: NTALT.ServerStatsUpdate s_stat_update = 42;
     */
    value: ServerStatsUpdate;
    case: "sStatUpdate";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<GameAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.GameAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameAction;

  static equals(a: GameAction | PlainMessage<GameAction> | undefined, b: GameAction | PlainMessage<GameAction> | undefined): boolean;
}

/**
 * @generated from message NTALT.PlayerFrame
 */
export declare class PlayerFrame extends Message<PlayerFrame> {
  /**
   * @generated from field: optional float x = 1;
   */
  x?: number;

  /**
   * @generated from field: optional float y = 2;
   */
  y?: number;

  /**
   * @generated from field: optional float arm_r = 3;
   */
  armR?: number;

  /**
   * @generated from field: optional float arm_scale_y = 4;
   */
  armScaleY?: number;

  /**
   * @generated from field: optional float scale_x = 5;
   */
  scaleX?: number;

  /**
   * @generated from field: optional int32 anim = 6;
   */
  anim?: number;

  /**
   * @generated from field: optional int32 held = 7;
   */
  held?: number;

  constructor(data?: PartialMessage<PlayerFrame>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.PlayerFrame";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerFrame;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerFrame;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerFrame;

  static equals(a: PlayerFrame | PlainMessage<PlayerFrame> | undefined, b: PlayerFrame | PlainMessage<PlayerFrame> | undefined): boolean;
}

/**
 * @generated from message NTALT.PlayerMove
 */
export declare class PlayerMove extends Message<PlayerMove> {
  /**
   * @generated from field: repeated NTALT.PlayerFrame frames = 1;
   */
  frames: PlayerFrame[];

  /**
   * @generated from field: string user_id = 15;
   */
  userId: string;

  constructor(data?: PartialMessage<PlayerMove>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.PlayerMove";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerMove;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerMove;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerMove;

  static equals(a: PlayerMove | PlainMessage<PlayerMove> | undefined, b: PlayerMove | PlainMessage<PlayerMove> | undefined): boolean;
}

/**
 * @generated from message NTALT.PlayerPosition
 */
export declare class PlayerPosition extends Message<PlayerPosition> {
  /**
   * @generated from field: NTALT.PlayerFrame frame = 1;
   */
  frame?: PlayerFrame;

  /**
   * @generated from field: string user_id = 15;
   */
  userId: string;

  constructor(data?: PartialMessage<PlayerPosition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.PlayerPosition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerPosition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerPosition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerPosition;

  static equals(a: PlayerPosition | PlainMessage<PlayerPosition> | undefined, b: PlayerPosition | PlainMessage<PlayerPosition> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerUpdate
 */
export declare class ClientPlayerUpdate extends Message<ClientPlayerUpdate> {
  /**
   * @generated from field: optional float cur_hp = 1;
   */
  curHp?: number;

  /**
   * @generated from field: optional float max_hp = 2;
   */
  maxHp?: number;

  /**
   * @generated from field: optional string location = 3;
   */
  location?: string;

  /**
   * @generated from field: optional bool sampo = 4;
   */
  sampo?: boolean;

  constructor(data?: PartialMessage<ClientPlayerUpdate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdate;

  static equals(a: ClientPlayerUpdate | PlainMessage<ClientPlayerUpdate> | undefined, b: ClientPlayerUpdate | PlainMessage<ClientPlayerUpdate> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerUpdate
 */
export declare class ServerPlayerUpdate extends Message<ServerPlayerUpdate> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: optional float cur_hp = 2;
   */
  curHp?: number;

  /**
   * @generated from field: optional float max_hp = 3;
   */
  maxHp?: number;

  /**
   * @generated from field: optional string location = 4;
   */
  location?: string;

  /**
   * @generated from field: optional bool sampo = 5;
   */
  sampo?: boolean;

  constructor(data?: PartialMessage<ServerPlayerUpdate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdate;

  static equals(a: ServerPlayerUpdate | PlainMessage<ServerPlayerUpdate> | undefined, b: ServerPlayerUpdate | PlainMessage<ServerPlayerUpdate> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory
 */
export declare class ClientPlayerUpdateInventory extends Message<ClientPlayerUpdateInventory> {
  /**
   * @generated from field: repeated NTALT.ClientPlayerUpdateInventory.InventoryWand wands = 1;
   */
  wands: ClientPlayerUpdateInventory_InventoryWand[];

  /**
   * @generated from field: repeated NTALT.ClientPlayerUpdateInventory.InventoryItem items = 2;
   */
  items: ClientPlayerUpdateInventory_InventoryItem[];

  /**
   * @generated from field: repeated NTALT.ClientPlayerUpdateInventory.InventorySpell spells = 3;
   */
  spells: ClientPlayerUpdateInventory_InventorySpell[];

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory;

  static equals(a: ClientPlayerUpdateInventory | PlainMessage<ClientPlayerUpdateInventory> | undefined, b: ClientPlayerUpdateInventory | PlainMessage<ClientPlayerUpdateInventory> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory.InventoryWand
 */
export declare class ClientPlayerUpdateInventory_InventoryWand extends Message<ClientPlayerUpdateInventory_InventoryWand> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: NTALT.Wand wand = 2;
   */
  wand?: Wand;

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory_InventoryWand>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory.InventoryWand";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory_InventoryWand;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryWand;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryWand;

  static equals(a: ClientPlayerUpdateInventory_InventoryWand | PlainMessage<ClientPlayerUpdateInventory_InventoryWand> | undefined, b: ClientPlayerUpdateInventory_InventoryWand | PlainMessage<ClientPlayerUpdateInventory_InventoryWand> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory.InventoryItem
 */
export declare class ClientPlayerUpdateInventory_InventoryItem extends Message<ClientPlayerUpdateInventory_InventoryItem> {
  /**
   * @generated from field: uint32 index = 3;
   */
  index: number;

  /**
   * @generated from field: NTALT.Item item = 4;
   */
  item?: Item;

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory_InventoryItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory.InventoryItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory_InventoryItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryItem;

  static equals(a: ClientPlayerUpdateInventory_InventoryItem | PlainMessage<ClientPlayerUpdateInventory_InventoryItem> | undefined, b: ClientPlayerUpdateInventory_InventoryItem | PlainMessage<ClientPlayerUpdateInventory_InventoryItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory.InventorySpell
 */
export declare class ClientPlayerUpdateInventory_InventorySpell extends Message<ClientPlayerUpdateInventory_InventorySpell> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: NTALT.Spell spell = 2;
   */
  spell?: Spell;

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory_InventorySpell>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory.InventorySpell";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory_InventorySpell;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventorySpell;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventorySpell;

  static equals(a: ClientPlayerUpdateInventory_InventorySpell | PlainMessage<ClientPlayerUpdateInventory_InventorySpell> | undefined, b: ClientPlayerUpdateInventory_InventorySpell | PlainMessage<ClientPlayerUpdateInventory_InventorySpell> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory
 */
export declare class ServerPlayerUpdateInventory extends Message<ServerPlayerUpdateInventory> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: repeated NTALT.ServerPlayerUpdateInventory.InventoryWand wands = 2;
   */
  wands: ServerPlayerUpdateInventory_InventoryWand[];

  /**
   * @generated from field: repeated NTALT.ServerPlayerUpdateInventory.InventoryItem items = 3;
   */
  items: ServerPlayerUpdateInventory_InventoryItem[];

  /**
   * @generated from field: repeated NTALT.ServerPlayerUpdateInventory.InventorySpell spells = 4;
   */
  spells: ServerPlayerUpdateInventory_InventorySpell[];

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory;

  static equals(a: ServerPlayerUpdateInventory | PlainMessage<ServerPlayerUpdateInventory> | undefined, b: ServerPlayerUpdateInventory | PlainMessage<ServerPlayerUpdateInventory> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory.InventoryWand
 */
export declare class ServerPlayerUpdateInventory_InventoryWand extends Message<ServerPlayerUpdateInventory_InventoryWand> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: NTALT.Wand wand = 2;
   */
  wand?: Wand;

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory_InventoryWand>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory.InventoryWand";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory_InventoryWand;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryWand;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryWand;

  static equals(a: ServerPlayerUpdateInventory_InventoryWand | PlainMessage<ServerPlayerUpdateInventory_InventoryWand> | undefined, b: ServerPlayerUpdateInventory_InventoryWand | PlainMessage<ServerPlayerUpdateInventory_InventoryWand> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory.InventoryItem
 */
export declare class ServerPlayerUpdateInventory_InventoryItem extends Message<ServerPlayerUpdateInventory_InventoryItem> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: NTALT.Item item = 2;
   */
  item?: Item;

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory_InventoryItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory.InventoryItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory_InventoryItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryItem;

  static equals(a: ServerPlayerUpdateInventory_InventoryItem | PlainMessage<ServerPlayerUpdateInventory_InventoryItem> | undefined, b: ServerPlayerUpdateInventory_InventoryItem | PlainMessage<ServerPlayerUpdateInventory_InventoryItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory.InventorySpell
 */
export declare class ServerPlayerUpdateInventory_InventorySpell extends Message<ServerPlayerUpdateInventory_InventorySpell> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: NTALT.Spell spell = 2;
   */
  spell?: Spell;

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory_InventorySpell>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory.InventorySpell";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory_InventorySpell;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventorySpell;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventorySpell;

  static equals(a: ServerPlayerUpdateInventory_InventorySpell | PlainMessage<ServerPlayerUpdateInventory_InventorySpell> | undefined, b: ServerPlayerUpdateInventory_InventorySpell | PlainMessage<ServerPlayerUpdateInventory_InventorySpell> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientHostItemBank
 */
export declare class ClientHostItemBank extends Message<ClientHostItemBank> {
  /**
   * @generated from field: repeated NTALT.Wand wands = 1;
   */
  wands: Wand[];

  /**
   * @generated from field: repeated NTALT.Spell spells = 2;
   */
  spells: Spell[];

  /**
   * @generated from field: repeated NTALT.Item items = 3;
   */
  items: Item[];

  /**
   * @generated from field: uint32 gold = 4;
   */
  gold: number;

  /**
   * @generated from field: repeated NTALT.EntityItem objects = 5;
   */
  objects: EntityItem[];

  constructor(data?: PartialMessage<ClientHostItemBank>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientHostItemBank";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientHostItemBank;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientHostItemBank;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientHostItemBank;

  static equals(a: ClientHostItemBank | PlainMessage<ClientHostItemBank> | undefined, b: ClientHostItemBank | PlainMessage<ClientHostItemBank> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerHostItemBank
 */
export declare class ServerHostItemBank extends Message<ServerHostItemBank> {
  /**
   * @generated from field: repeated NTALT.Wand wands = 1;
   */
  wands: Wand[];

  /**
   * @generated from field: repeated NTALT.Spell spells = 2;
   */
  spells: Spell[];

  /**
   * @generated from field: repeated NTALT.Item items = 3;
   */
  items: Item[];

  /**
   * @generated from field: uint32 gold = 4;
   */
  gold: number;

  /**
   * @generated from field: repeated NTALT.EntityItem objects = 5;
   */
  objects: EntityItem[];

  constructor(data?: PartialMessage<ServerHostItemBank>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerHostItemBank";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostItemBank;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostItemBank;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostItemBank;

  static equals(a: ServerHostItemBank | PlainMessage<ServerHostItemBank> | undefined, b: ServerHostItemBank | PlainMessage<ServerHostItemBank> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientHostUserTake
 */
export declare class ClientHostUserTake extends Message<ClientHostUserTake> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: bool success = 3;
   */
  success: boolean;

  constructor(data?: PartialMessage<ClientHostUserTake>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientHostUserTake";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientHostUserTake;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientHostUserTake;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientHostUserTake;

  static equals(a: ClientHostUserTake | PlainMessage<ClientHostUserTake> | undefined, b: ClientHostUserTake | PlainMessage<ClientHostUserTake> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerHostUserTake
 */
export declare class ServerHostUserTake extends Message<ServerHostUserTake> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: bool success = 3;
   */
  success: boolean;

  constructor(data?: PartialMessage<ServerHostUserTake>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerHostUserTake";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostUserTake;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostUserTake;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostUserTake;

  static equals(a: ServerHostUserTake | PlainMessage<ServerHostUserTake> | undefined, b: ServerHostUserTake | PlainMessage<ServerHostUserTake> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientHostUserTakeGold
 */
export declare class ClientHostUserTakeGold extends Message<ClientHostUserTakeGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  /**
   * @generated from field: bool success = 3;
   */
  success: boolean;

  constructor(data?: PartialMessage<ClientHostUserTakeGold>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientHostUserTakeGold";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientHostUserTakeGold;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientHostUserTakeGold;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientHostUserTakeGold;

  static equals(a: ClientHostUserTakeGold | PlainMessage<ClientHostUserTakeGold> | undefined, b: ClientHostUserTakeGold | PlainMessage<ClientHostUserTakeGold> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerHostUserTakeGold
 */
export declare class ServerHostUserTakeGold extends Message<ServerHostUserTakeGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  /**
   * @generated from field: bool success = 3;
   */
  success: boolean;

  constructor(data?: PartialMessage<ServerHostUserTakeGold>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerHostUserTakeGold";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostUserTakeGold;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostUserTakeGold;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostUserTakeGold;

  static equals(a: ServerHostUserTakeGold | PlainMessage<ServerHostUserTakeGold> | undefined, b: ServerHostUserTakeGold | PlainMessage<ServerHostUserTakeGold> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerAddGold
 */
export declare class ClientPlayerAddGold extends Message<ClientPlayerAddGold> {
  /**
   * @generated from field: uint32 amount = 1;
   */
  amount: number;

  constructor(data?: PartialMessage<ClientPlayerAddGold>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerAddGold";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddGold;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddGold;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddGold;

  static equals(a: ClientPlayerAddGold | PlainMessage<ClientPlayerAddGold> | undefined, b: ClientPlayerAddGold | PlainMessage<ClientPlayerAddGold> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerAddGold
 */
export declare class ServerPlayerAddGold extends Message<ServerPlayerAddGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<ServerPlayerAddGold>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerAddGold";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddGold;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddGold;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddGold;

  static equals(a: ServerPlayerAddGold | PlainMessage<ServerPlayerAddGold> | undefined, b: ServerPlayerAddGold | PlainMessage<ServerPlayerAddGold> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerTakeGold
 */
export declare class ClientPlayerTakeGold extends Message<ClientPlayerTakeGold> {
  /**
   * @generated from field: uint32 amount = 1;
   */
  amount: number;

  constructor(data?: PartialMessage<ClientPlayerTakeGold>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerTakeGold";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerTakeGold;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerTakeGold;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerTakeGold;

  static equals(a: ClientPlayerTakeGold | PlainMessage<ClientPlayerTakeGold> | undefined, b: ClientPlayerTakeGold | PlainMessage<ClientPlayerTakeGold> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerTakeGold
 */
export declare class ServerPlayerTakeGold extends Message<ServerPlayerTakeGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<ServerPlayerTakeGold>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerTakeGold";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerTakeGold;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerTakeGold;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerTakeGold;

  static equals(a: ServerPlayerTakeGold | PlainMessage<ServerPlayerTakeGold> | undefined, b: ServerPlayerTakeGold | PlainMessage<ServerPlayerTakeGold> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerAddItem
 */
export declare class ClientPlayerAddItem extends Message<ClientPlayerAddItem> {
  /**
   * @generated from oneof NTALT.ClientPlayerAddItem.item
   */
  item: {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Spells spells = 1;
     */
    value: ClientPlayerAddItem_Spells;
    case: "spells";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Wands wands = 2;
     */
    value: ClientPlayerAddItem_Wands;
    case: "wands";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Items flasks = 3;
     */
    value: ClientPlayerAddItem_Items;
    case: "flasks";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Entities objects = 4;
     */
    value: ClientPlayerAddItem_Entities;
    case: "objects";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ClientPlayerAddItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem;

  static equals(a: ClientPlayerAddItem | PlainMessage<ClientPlayerAddItem> | undefined, b: ClientPlayerAddItem | PlainMessage<ClientPlayerAddItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Spells
 */
export declare class ClientPlayerAddItem_Spells extends Message<ClientPlayerAddItem_Spells> {
  /**
   * @generated from field: repeated NTALT.Spell list = 1;
   */
  list: Spell[];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Spells>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Spells";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Spells;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Spells;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Spells;

  static equals(a: ClientPlayerAddItem_Spells | PlainMessage<ClientPlayerAddItem_Spells> | undefined, b: ClientPlayerAddItem_Spells | PlainMessage<ClientPlayerAddItem_Spells> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Wands
 */
export declare class ClientPlayerAddItem_Wands extends Message<ClientPlayerAddItem_Wands> {
  /**
   * @generated from field: repeated NTALT.Wand list = 1;
   */
  list: Wand[];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Wands>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Wands";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Wands;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Wands;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Wands;

  static equals(a: ClientPlayerAddItem_Wands | PlainMessage<ClientPlayerAddItem_Wands> | undefined, b: ClientPlayerAddItem_Wands | PlainMessage<ClientPlayerAddItem_Wands> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Items
 */
export declare class ClientPlayerAddItem_Items extends Message<ClientPlayerAddItem_Items> {
  /**
   * @generated from field: repeated NTALT.Item list = 1;
   */
  list: Item[];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Items>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Items";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Items;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Items;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Items;

  static equals(a: ClientPlayerAddItem_Items | PlainMessage<ClientPlayerAddItem_Items> | undefined, b: ClientPlayerAddItem_Items | PlainMessage<ClientPlayerAddItem_Items> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Entities
 */
export declare class ClientPlayerAddItem_Entities extends Message<ClientPlayerAddItem_Entities> {
  /**
   * @generated from field: repeated NTALT.EntityItem list = 1;
   */
  list: EntityItem[];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Entities>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Entities";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Entities;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Entities;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Entities;

  static equals(a: ClientPlayerAddItem_Entities | PlainMessage<ClientPlayerAddItem_Entities> | undefined, b: ClientPlayerAddItem_Entities | PlainMessage<ClientPlayerAddItem_Entities> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerAddItem
 */
export declare class ServerPlayerAddItem extends Message<ServerPlayerAddItem> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from oneof NTALT.ServerPlayerAddItem.item
   */
  item: {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Spells spells = 2;
     */
    value: ServerPlayerAddItem_Spells;
    case: "spells";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Wands wands = 3;
     */
    value: ServerPlayerAddItem_Wands;
    case: "wands";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Items flasks = 4;
     */
    value: ServerPlayerAddItem_Items;
    case: "flasks";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Entities objects = 5;
     */
    value: ServerPlayerAddItem_Entities;
    case: "objects";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ServerPlayerAddItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem;

  static equals(a: ServerPlayerAddItem | PlainMessage<ServerPlayerAddItem> | undefined, b: ServerPlayerAddItem | PlainMessage<ServerPlayerAddItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Spells
 */
export declare class ServerPlayerAddItem_Spells extends Message<ServerPlayerAddItem_Spells> {
  /**
   * @generated from field: repeated NTALT.Spell list = 1;
   */
  list: Spell[];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Spells>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Spells";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Spells;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Spells;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Spells;

  static equals(a: ServerPlayerAddItem_Spells | PlainMessage<ServerPlayerAddItem_Spells> | undefined, b: ServerPlayerAddItem_Spells | PlainMessage<ServerPlayerAddItem_Spells> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Wands
 */
export declare class ServerPlayerAddItem_Wands extends Message<ServerPlayerAddItem_Wands> {
  /**
   * @generated from field: repeated NTALT.Wand list = 2;
   */
  list: Wand[];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Wands>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Wands";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Wands;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Wands;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Wands;

  static equals(a: ServerPlayerAddItem_Wands | PlainMessage<ServerPlayerAddItem_Wands> | undefined, b: ServerPlayerAddItem_Wands | PlainMessage<ServerPlayerAddItem_Wands> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Items
 */
export declare class ServerPlayerAddItem_Items extends Message<ServerPlayerAddItem_Items> {
  /**
   * @generated from field: repeated NTALT.Item list = 3;
   */
  list: Item[];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Items>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Items";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Items;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Items;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Items;

  static equals(a: ServerPlayerAddItem_Items | PlainMessage<ServerPlayerAddItem_Items> | undefined, b: ServerPlayerAddItem_Items | PlainMessage<ServerPlayerAddItem_Items> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Entities
 */
export declare class ServerPlayerAddItem_Entities extends Message<ServerPlayerAddItem_Entities> {
  /**
   * @generated from field: repeated NTALT.EntityItem list = 4;
   */
  list: EntityItem[];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Entities>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Entities";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Entities;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Entities;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Entities;

  static equals(a: ServerPlayerAddItem_Entities | PlainMessage<ServerPlayerAddItem_Entities> | undefined, b: ServerPlayerAddItem_Entities | PlainMessage<ServerPlayerAddItem_Entities> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerTakeItem
 */
export declare class ClientPlayerTakeItem extends Message<ClientPlayerTakeItem> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<ClientPlayerTakeItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerTakeItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerTakeItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerTakeItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerTakeItem;

  static equals(a: ClientPlayerTakeItem | PlainMessage<ClientPlayerTakeItem> | undefined, b: ClientPlayerTakeItem | PlainMessage<ClientPlayerTakeItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerTakeItem
 */
export declare class ServerPlayerTakeItem extends Message<ServerPlayerTakeItem> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  constructor(data?: PartialMessage<ServerPlayerTakeItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerTakeItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerTakeItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerTakeItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerTakeItem;

  static equals(a: ServerPlayerTakeItem | PlainMessage<ServerPlayerTakeItem> | undefined, b: ServerPlayerTakeItem | PlainMessage<ServerPlayerTakeItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientChat
 */
export declare class ClientChat extends Message<ClientChat> {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  constructor(data?: PartialMessage<ClientChat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientChat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientChat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientChat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientChat;

  static equals(a: ClientChat | PlainMessage<ClientChat> | undefined, b: ClientChat | PlainMessage<ClientChat> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerChat
 */
export declare class ServerChat extends Message<ServerChat> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string message = 4;
   */
  message: string;

  constructor(data?: PartialMessage<ServerChat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerChat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerChat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerChat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerChat;

  static equals(a: ServerChat | PlainMessage<ServerChat> | undefined, b: ServerChat | PlainMessage<ServerChat> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerStatsUpdate
 */
export declare class ServerStatsUpdate extends Message<ServerStatsUpdate> {
  /**
   * @generated from field: string data = 1;
   */
  data: string;

  constructor(data?: PartialMessage<ServerStatsUpdate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerStatsUpdate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerStatsUpdate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerStatsUpdate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerStatsUpdate;

  static equals(a: ServerStatsUpdate | PlainMessage<ServerStatsUpdate> | undefined, b: ServerStatsUpdate | PlainMessage<ServerStatsUpdate> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerPickup
 */
export declare class ClientPlayerPickup extends Message<ClientPlayerPickup> {
  /**
   * @generated from oneof NTALT.ClientPlayerPickup.kind
   */
  kind: {
    /**
     * @generated from field: NTALT.ClientPlayerPickup.HeartPickup heart = 1;
     */
    value: ClientPlayerPickup_HeartPickup;
    case: "heart";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerPickup.OrbPickup orb = 2;
     */
    value: ClientPlayerPickup_OrbPickup;
    case: "orb";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ClientPlayerPickup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerPickup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerPickup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerPickup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerPickup;

  static equals(a: ClientPlayerPickup | PlainMessage<ClientPlayerPickup> | undefined, b: ClientPlayerPickup | PlainMessage<ClientPlayerPickup> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerPickup.HeartPickup
 */
export declare class ClientPlayerPickup_HeartPickup extends Message<ClientPlayerPickup_HeartPickup> {
  /**
   * @generated from field: bool hp_perk = 1;
   */
  hpPerk: boolean;

  constructor(data?: PartialMessage<ClientPlayerPickup_HeartPickup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerPickup.HeartPickup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerPickup_HeartPickup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerPickup_HeartPickup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerPickup_HeartPickup;

  static equals(a: ClientPlayerPickup_HeartPickup | PlainMessage<ClientPlayerPickup_HeartPickup> | undefined, b: ClientPlayerPickup_HeartPickup | PlainMessage<ClientPlayerPickup_HeartPickup> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerPickup.OrbPickup
 */
export declare class ClientPlayerPickup_OrbPickup extends Message<ClientPlayerPickup_OrbPickup> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id: number;

  constructor(data?: PartialMessage<ClientPlayerPickup_OrbPickup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerPickup.OrbPickup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerPickup_OrbPickup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerPickup_OrbPickup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerPickup_OrbPickup;

  static equals(a: ClientPlayerPickup_OrbPickup | PlainMessage<ClientPlayerPickup_OrbPickup> | undefined, b: ClientPlayerPickup_OrbPickup | PlainMessage<ClientPlayerPickup_OrbPickup> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerPickup
 */
export declare class ServerPlayerPickup extends Message<ServerPlayerPickup> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from oneof NTALT.ServerPlayerPickup.kind
   */
  kind: {
    /**
     * @generated from field: NTALT.ServerPlayerPickup.HeartPickup heart = 2;
     */
    value: ServerPlayerPickup_HeartPickup;
    case: "heart";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerPickup.OrbPickup orb = 3;
     */
    value: ServerPlayerPickup_OrbPickup;
    case: "orb";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ServerPlayerPickup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerPickup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerPickup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerPickup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerPickup;

  static equals(a: ServerPlayerPickup | PlainMessage<ServerPlayerPickup> | undefined, b: ServerPlayerPickup | PlainMessage<ServerPlayerPickup> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerPickup.HeartPickup
 */
export declare class ServerPlayerPickup_HeartPickup extends Message<ServerPlayerPickup_HeartPickup> {
  /**
   * @generated from field: bool hp_perk = 1;
   */
  hpPerk: boolean;

  constructor(data?: PartialMessage<ServerPlayerPickup_HeartPickup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerPickup.HeartPickup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerPickup_HeartPickup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerPickup_HeartPickup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerPickup_HeartPickup;

  static equals(a: ServerPlayerPickup_HeartPickup | PlainMessage<ServerPlayerPickup_HeartPickup> | undefined, b: ServerPlayerPickup_HeartPickup | PlainMessage<ServerPlayerPickup_HeartPickup> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerPickup.OrbPickup
 */
export declare class ServerPlayerPickup_OrbPickup extends Message<ServerPlayerPickup_OrbPickup> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id: number;

  constructor(data?: PartialMessage<ServerPlayerPickup_OrbPickup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerPickup.OrbPickup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerPickup_OrbPickup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerPickup_OrbPickup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerPickup_OrbPickup;

  static equals(a: ServerPlayerPickup_OrbPickup | PlainMessage<ServerPlayerPickup_OrbPickup> | undefined, b: ServerPlayerPickup_OrbPickup | PlainMessage<ServerPlayerPickup_OrbPickup> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientNemesisPickupItem
 */
export declare class ClientNemesisPickupItem extends Message<ClientNemesisPickupItem> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  constructor(data?: PartialMessage<ClientNemesisPickupItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientNemesisPickupItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientNemesisPickupItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientNemesisPickupItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientNemesisPickupItem;

  static equals(a: ClientNemesisPickupItem | PlainMessage<ClientNemesisPickupItem> | undefined, b: ClientNemesisPickupItem | PlainMessage<ClientNemesisPickupItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerNemesisPickupItem
 */
export declare class ServerNemesisPickupItem extends Message<ServerNemesisPickupItem> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string game_id = 2;
   */
  gameId: string;

  constructor(data?: PartialMessage<ServerNemesisPickupItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerNemesisPickupItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerNemesisPickupItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerNemesisPickupItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerNemesisPickupItem;

  static equals(a: ServerNemesisPickupItem | PlainMessage<ServerNemesisPickupItem> | undefined, b: ServerNemesisPickupItem | PlainMessage<ServerNemesisPickupItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientNemesisAbility
 */
export declare class ClientNemesisAbility extends Message<ClientNemesisAbility> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  constructor(data?: PartialMessage<ClientNemesisAbility>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientNemesisAbility";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientNemesisAbility;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientNemesisAbility;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientNemesisAbility;

  static equals(a: ClientNemesisAbility | PlainMessage<ClientNemesisAbility> | undefined, b: ClientNemesisAbility | PlainMessage<ClientNemesisAbility> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerNemesisAbility
 */
export declare class ServerNemesisAbility extends Message<ServerNemesisAbility> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string game_id = 2;
   */
  gameId: string;

  constructor(data?: PartialMessage<ServerNemesisAbility>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerNemesisAbility";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerNemesisAbility;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerNemesisAbility;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerNemesisAbility;

  static equals(a: ServerNemesisAbility | PlainMessage<ServerNemesisAbility> | undefined, b: ServerNemesisAbility | PlainMessage<ServerNemesisAbility> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerDeath
 */
export declare class ClientPlayerDeath extends Message<ClientPlayerDeath> {
  /**
   * @generated from field: bool is_win = 1;
   */
  isWin: boolean;

  /**
   * @generated from field: optional uint32 game_time = 2;
   */
  gameTime?: number;

  constructor(data?: PartialMessage<ClientPlayerDeath>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerDeath";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerDeath;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerDeath;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerDeath;

  static equals(a: ClientPlayerDeath | PlainMessage<ClientPlayerDeath> | undefined, b: ClientPlayerDeath | PlainMessage<ClientPlayerDeath> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerDeath
 */
export declare class ServerPlayerDeath extends Message<ServerPlayerDeath> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: bool is_win = 2;
   */
  isWin: boolean;

  /**
   * @generated from field: optional uint32 game_time = 3;
   */
  gameTime?: number;

  constructor(data?: PartialMessage<ServerPlayerDeath>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerDeath";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerDeath;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerDeath;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerDeath;

  static equals(a: ServerPlayerDeath | PlainMessage<ServerPlayerDeath> | undefined, b: ServerPlayerDeath | PlainMessage<ServerPlayerDeath> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerNewGamePlus
 */
export declare class ClientPlayerNewGamePlus extends Message<ClientPlayerNewGamePlus> {
  /**
   * @generated from field: uint32 amount = 1;
   */
  amount: number;

  constructor(data?: PartialMessage<ClientPlayerNewGamePlus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerNewGamePlus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerNewGamePlus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerNewGamePlus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerNewGamePlus;

  static equals(a: ClientPlayerNewGamePlus | PlainMessage<ClientPlayerNewGamePlus> | undefined, b: ClientPlayerNewGamePlus | PlainMessage<ClientPlayerNewGamePlus> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerNewGamePlus
 */
export declare class ServerPlayerNewGamePlus extends Message<ServerPlayerNewGamePlus> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<ServerPlayerNewGamePlus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerNewGamePlus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerNewGamePlus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerNewGamePlus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerNewGamePlus;

  static equals(a: ServerPlayerNewGamePlus | PlainMessage<ServerPlayerNewGamePlus> | undefined, b: ServerPlayerNewGamePlus | PlainMessage<ServerPlayerNewGamePlus> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientPlayerSecretHourglass
 */
export declare class ClientPlayerSecretHourglass extends Message<ClientPlayerSecretHourglass> {
  /**
   * @generated from field: string material = 1;
   */
  material: string;

  constructor(data?: PartialMessage<ClientPlayerSecretHourglass>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientPlayerSecretHourglass";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerSecretHourglass;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerSecretHourglass;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerSecretHourglass;

  static equals(a: ClientPlayerSecretHourglass | PlainMessage<ClientPlayerSecretHourglass> | undefined, b: ClientPlayerSecretHourglass | PlainMessage<ClientPlayerSecretHourglass> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerPlayerSecretHourglass
 */
export declare class ServerPlayerSecretHourglass extends Message<ServerPlayerSecretHourglass> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string material = 2;
   */
  material: string;

  constructor(data?: PartialMessage<ServerPlayerSecretHourglass>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerPlayerSecretHourglass";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerSecretHourglass;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerSecretHourglass;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerSecretHourglass;

  static equals(a: ServerPlayerSecretHourglass | PlainMessage<ServerPlayerSecretHourglass> | undefined, b: ServerPlayerSecretHourglass | PlainMessage<ServerPlayerSecretHourglass> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientCustomModEvent
 */
export declare class ClientCustomModEvent extends Message<ClientCustomModEvent> {
  /**
   * @generated from field: string payload = 1;
   */
  payload: string;

  constructor(data?: PartialMessage<ClientCustomModEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientCustomModEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientCustomModEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientCustomModEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientCustomModEvent;

  static equals(a: ClientCustomModEvent | PlainMessage<ClientCustomModEvent> | undefined, b: ClientCustomModEvent | PlainMessage<ClientCustomModEvent> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerCustomModEvent
 */
export declare class ServerCustomModEvent extends Message<ServerCustomModEvent> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string payload = 2;
   */
  payload: string;

  constructor(data?: PartialMessage<ServerCustomModEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerCustomModEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerCustomModEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerCustomModEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerCustomModEvent;

  static equals(a: ServerCustomModEvent | PlainMessage<ServerCustomModEvent> | undefined, b: ServerCustomModEvent | PlainMessage<ServerCustomModEvent> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRespawnPenalty
 */
export declare class ClientRespawnPenalty extends Message<ClientRespawnPenalty> {
  /**
   * @generated from field: uint32 deaths = 1;
   */
  deaths: number;

  constructor(data?: PartialMessage<ClientRespawnPenalty>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRespawnPenalty";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRespawnPenalty;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRespawnPenalty;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRespawnPenalty;

  static equals(a: ClientRespawnPenalty | PlainMessage<ClientRespawnPenalty> | undefined, b: ClientRespawnPenalty | PlainMessage<ClientRespawnPenalty> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRespawnPenalty
 */
export declare class ServerRespawnPenalty extends Message<ServerRespawnPenalty> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: uint32 deaths = 2;
   */
  deaths: number;

  constructor(data?: PartialMessage<ServerRespawnPenalty>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRespawnPenalty";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRespawnPenalty;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRespawnPenalty;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRespawnPenalty;

  static equals(a: ServerRespawnPenalty | PlainMessage<ServerRespawnPenalty> | undefined, b: ServerRespawnPenalty | PlainMessage<ServerRespawnPenalty> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientAngerySteve
 */
export declare class ClientAngerySteve extends Message<ClientAngerySteve> {
  /**
   * @generated from field: bool idk = 1;
   */
  idk: boolean;

  constructor(data?: PartialMessage<ClientAngerySteve>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientAngerySteve";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientAngerySteve;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientAngerySteve;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientAngerySteve;

  static equals(a: ClientAngerySteve | PlainMessage<ClientAngerySteve> | undefined, b: ClientAngerySteve | PlainMessage<ClientAngerySteve> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerAngerySteve
 */
export declare class ServerAngerySteve extends Message<ServerAngerySteve> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ServerAngerySteve>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerAngerySteve";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerAngerySteve;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerAngerySteve;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerAngerySteve;

  static equals(a: ServerAngerySteve | PlainMessage<ServerAngerySteve> | undefined, b: ServerAngerySteve | PlainMessage<ServerAngerySteve> | undefined): boolean;
}

/**
 * @generated from message NTALT.Wand
 */
export declare class Wand extends Message<Wand> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: NTALT.Wand.WandStats stats = 2;
   */
  stats?: Wand_WandStats;

  /**
   * @generated from field: repeated NTALT.Spell always_cast = 3;
   */
  alwaysCast: Spell[];

  /**
   * @generated from field: repeated NTALT.Spell deck = 4;
   */
  deck: Spell[];

  /**
   * @generated from field: optional string sent_by = 5;
   */
  sentBy?: string;

  /**
   * @generated from field: optional string contributed_by = 6;
   */
  contributedBy?: string;

  constructor(data?: PartialMessage<Wand>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Wand";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Wand;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Wand;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Wand;

  static equals(a: Wand | PlainMessage<Wand> | undefined, b: Wand | PlainMessage<Wand> | undefined): boolean;
}

/**
 * @generated from message NTALT.Wand.WandStats
 */
export declare class Wand_WandStats extends Message<Wand_WandStats> {
  /**
   * @generated from field: string sprite = 1;
   */
  sprite: string;

  /**
   * @generated from field: bool named = 2;
   */
  named: boolean;

  /**
   * @generated from field: string ui_name = 3;
   */
  uiName: string;

  /**
   * @generated from field: float mana_max = 4;
   */
  manaMax: number;

  /**
   * @generated from field: float mana_charge_speed = 5;
   */
  manaChargeSpeed: number;

  /**
   * @generated from field: int32 reload_time = 6;
   */
  reloadTime: number;

  /**
   * @generated from field: uint32 actions_per_round = 7;
   */
  actionsPerRound: number;

  /**
   * @generated from field: uint32 deck_capacity = 8;
   */
  deckCapacity: number;

  /**
   * @generated from field: bool shuffle_deck_when_empty = 9;
   */
  shuffleDeckWhenEmpty: boolean;

  /**
   * @generated from field: float spread_degrees = 10;
   */
  spreadDegrees: number;

  /**
   * @generated from field: float speed_multiplier = 11;
   */
  speedMultiplier: number;

  /**
   * @generated from field: int32 fire_rate_wait = 12;
   */
  fireRateWait: number;

  /**
   * @generated from field: float tip_x = 13;
   */
  tipX: number;

  /**
   * @generated from field: float tip_y = 14;
   */
  tipY: number;

  /**
   * @generated from field: float grip_x = 15;
   */
  gripX: number;

  /**
   * @generated from field: float grip_y = 16;
   */
  gripY: number;

  constructor(data?: PartialMessage<Wand_WandStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Wand.WandStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Wand_WandStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Wand_WandStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Wand_WandStats;

  static equals(a: Wand_WandStats | PlainMessage<Wand_WandStats> | undefined, b: Wand_WandStats | PlainMessage<Wand_WandStats> | undefined): boolean;
}

/**
 * @generated from message NTALT.Spell
 */
export declare class Spell extends Message<Spell> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string game_id = 2;
   */
  gameId: string;

  /**
   * @generated from field: optional string sent_by = 3;
   */
  sentBy?: string;

  /**
   * @generated from field: optional string contributed_by = 4;
   */
  contributedBy?: string;

  /**
   * @generated from field: int32 uses_remaining = 5;
   */
  usesRemaining: number;

  constructor(data?: PartialMessage<Spell>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Spell";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spell;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spell;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spell;

  static equals(a: Spell | PlainMessage<Spell> | undefined, b: Spell | PlainMessage<Spell> | undefined): boolean;
}

/**
 * @generated from message NTALT.Item
 */
export declare class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: NTALT.Item.Color color = 2;
   */
  color?: Item_Color;

  /**
   * @generated from field: repeated NTALT.Item.Material content = 3;
   */
  content: Item_Material[];

  /**
   * @generated from field: optional string sent_by = 4;
   */
  sentBy?: string;

  /**
   * @generated from field: optional string contributed_by = 5;
   */
  contributedBy?: string;

  /**
   * @generated from field: bool is_chest = 6 [deprecated = true];
   * @deprecated
   */
  isChest: boolean;

  /**
   * @generated from field: string item_type = 7;
   */
  itemType: string;

  constructor(data?: PartialMessage<Item>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Item";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item;

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean;
}

/**
 * @generated from message NTALT.Item.Color
 */
export declare class Item_Color extends Message<Item_Color> {
  /**
   * @generated from field: float r = 1;
   */
  r: number;

  /**
   * @generated from field: float g = 2;
   */
  g: number;

  /**
   * @generated from field: float b = 3;
   */
  b: number;

  constructor(data?: PartialMessage<Item_Color>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Item.Color";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item_Color;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item_Color;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item_Color;

  static equals(a: Item_Color | PlainMessage<Item_Color> | undefined, b: Item_Color | PlainMessage<Item_Color> | undefined): boolean;
}

/**
 * @generated from message NTALT.Item.Material
 */
export declare class Item_Material extends Message<Item_Material> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id: number;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount: number;

  constructor(data?: PartialMessage<Item_Material>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.Item.Material";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item_Material;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item_Material;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item_Material;

  static equals(a: Item_Material | PlainMessage<Item_Material> | undefined, b: Item_Material | PlainMessage<Item_Material> | undefined): boolean;
}

/**
 * @generated from message NTALT.EntityItem
 */
export declare class EntityItem extends Message<EntityItem> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * @generated from field: string sprite = 3;
   */
  sprite: string;

  /**
   * @generated from field: optional string sent_by = 4;
   */
  sentBy?: string;

  constructor(data?: PartialMessage<EntityItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.EntityItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityItem;

  static equals(a: EntityItem | PlainMessage<EntityItem> | undefined, b: EntityItem | PlainMessage<EntityItem> | undefined): boolean;
}

/**
 * @generated from message NTALT.LobbyAction
 */
export declare class LobbyAction extends Message<LobbyAction> {
  /**
   * @generated from oneof NTALT.LobbyAction.action
   */
  action: {
    /**
     * @generated from field: NTALT.ClientRoomCreate c_room_create = 1;
     */
    value: ClientRoomCreate;
    case: "cRoomCreate";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomCreated s_room_created = 2;
     */
    value: ServerRoomCreated;
    case: "sRoomCreated";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomCreateFailed s_room_create_failed = 3;
     */
    value: ServerRoomCreateFailed;
    case: "sRoomCreateFailed";
  } | {
    /**
     * @generated from field: NTALT.ClientRoomUpdate c_room_update = 4;
     */
    value: ClientRoomUpdate;
    case: "cRoomUpdate";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomUpdated s_room_updated = 5;
     */
    value: ServerRoomUpdated;
    case: "sRoomUpdated";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomUpdateFailed s_room_update_failed = 6;
     */
    value: ServerRoomUpdateFailed;
    case: "sRoomUpdateFailed";
  } | {
    /**
     * @generated from field: NTALT.ClientRoomFlagsUpdate c_room_flags_update = 7;
     */
    value: ClientRoomFlagsUpdate;
    case: "cRoomFlagsUpdate";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomFlagsUpdated s_room_flags_updated = 8;
     */
    value: ServerRoomFlagsUpdated;
    case: "sRoomFlagsUpdated";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomFlagsUpdateFailed s_room_flags_update_failed = 9;
     */
    value: ServerRoomFlagsUpdateFailed;
    case: "sRoomFlagsUpdateFailed";
  } | {
    /**
     * @generated from field: NTALT.ClientRoomDelete c_room_delete = 10;
     */
    value: ClientRoomDelete;
    case: "cRoomDelete";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomDeleted s_room_deleted = 11;
     */
    value: ServerRoomDeleted;
    case: "sRoomDeleted";
  } | {
    /**
     * @generated from field: NTALT.ClientJoinRoom c_join_room = 12;
     */
    value: ClientJoinRoom;
    case: "cJoinRoom";
  } | {
    /**
     * @generated from field: NTALT.ServerJoinRoomSuccess s_join_room_success = 13;
     */
    value: ServerJoinRoomSuccess;
    case: "sJoinRoomSuccess";
  } | {
    /**
     * @generated from field: NTALT.ServerJoinRoomFailed s_join_room_failed = 14;
     */
    value: ServerJoinRoomFailed;
    case: "sJoinRoomFailed";
  } | {
    /**
     * @generated from field: NTALT.ServerUserJoinedRoom s_user_joined_room = 15;
     */
    value: ServerUserJoinedRoom;
    case: "sUserJoinedRoom";
  } | {
    /**
     * @generated from field: NTALT.ClientLeaveRoom c_leave_room = 16;
     */
    value: ClientLeaveRoom;
    case: "cLeaveRoom";
  } | {
    /**
     * @generated from field: NTALT.ServerUserLeftRoom s_user_left_room = 17;
     */
    value: ServerUserLeftRoom;
    case: "sUserLeftRoom";
  } | {
    /**
     * @generated from field: NTALT.ClientKickUser c_kick_user = 18;
     */
    value: ClientKickUser;
    case: "cKickUser";
  } | {
    /**
     * @generated from field: NTALT.ServerUserKicked s_user_kicked = 19;
     */
    value: ServerUserKicked;
    case: "sUserKicked";
  } | {
    /**
     * @generated from field: NTALT.ClientBanUser c_ban_user = 20;
     */
    value: ClientBanUser;
    case: "cBanUser";
  } | {
    /**
     * @generated from field: NTALT.ServerUserBanned s_user_banned = 21;
     */
    value: ServerUserBanned;
    case: "sUserBanned";
  } | {
    /**
     * @generated from field: NTALT.ClientReadyState c_ready_state = 22;
     */
    value: ClientReadyState;
    case: "cReadyState";
  } | {
    /**
     * @generated from field: NTALT.ServerUserReadyState s_user_ready_state = 23;
     */
    value: ServerUserReadyState;
    case: "sUserReadyState";
  } | {
    /**
     * @generated from field: NTALT.ClientStartRun c_start_run = 24;
     */
    value: ClientStartRun;
    case: "cStartRun";
  } | {
    /**
     * @generated from field: NTALT.ServerHostStart s_host_start = 25;
     */
    value: ServerHostStart;
    case: "sHostStart";
  } | {
    /**
     * @generated from field: NTALT.ClientRequestRoomList c_request_room_list = 27;
     */
    value: ClientRequestRoomList;
    case: "cRequestRoomList";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomList s_room_list = 28;
     */
    value: ServerRoomList;
    case: "sRoomList";
  } | {
    /**
     * @generated from field: NTALT.ServerDisconnected s_disconnected = 31;
     */
    value: ServerDisconnected;
    case: "sDisconnected";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomAddToList s_room_add_to_list = 32;
     */
    value: ServerRoomAddToList;
    case: "sRoomAddToList";
  } | {
    /**
     * @generated from field: NTALT.ClientRunOver c_run_over = 33;
     */
    value: ClientRunOver;
    case: "cRunOver";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<LobbyAction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.LobbyAction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LobbyAction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LobbyAction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LobbyAction;

  static equals(a: LobbyAction | PlainMessage<LobbyAction> | undefined, b: LobbyAction | PlainMessage<LobbyAction> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRunOver
 */
export declare class ClientRunOver extends Message<ClientRunOver> {
  /**
   * @generated from field: optional bool idk = 1;
   */
  idk?: boolean;

  constructor(data?: PartialMessage<ClientRunOver>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRunOver";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRunOver;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRunOver;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRunOver;

  static equals(a: ClientRunOver | PlainMessage<ClientRunOver> | undefined, b: ClientRunOver | PlainMessage<ClientRunOver> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerDisconnected
 */
export declare class ServerDisconnected extends Message<ServerDisconnected> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<ServerDisconnected>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerDisconnected";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerDisconnected;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerDisconnected;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerDisconnected;

  static equals(a: ServerDisconnected | PlainMessage<ServerDisconnected> | undefined, b: ServerDisconnected | PlainMessage<ServerDisconnected> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRoomDelete
 */
export declare class ClientRoomDelete extends Message<ClientRoomDelete> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<ClientRoomDelete>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRoomDelete";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomDelete;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomDelete;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomDelete;

  static equals(a: ClientRoomDelete | PlainMessage<ClientRoomDelete> | undefined, b: ClientRoomDelete | PlainMessage<ClientRoomDelete> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomDeleted
 */
export declare class ServerRoomDeleted extends Message<ServerRoomDeleted> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<ServerRoomDeleted>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomDeleted";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomDeleted;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomDeleted;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomDeleted;

  static equals(a: ServerRoomDeleted | PlainMessage<ServerRoomDeleted> | undefined, b: ServerRoomDeleted | PlainMessage<ServerRoomDeleted> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRoomCreate
 */
export declare class ClientRoomCreate extends Message<ClientRoomCreate> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint32 gamemode = 2;
   */
  gamemode: number;

  /**
   * @generated from field: uint32 max_users = 3;
   */
  maxUsers: number;

  /**
   * @generated from field: optional string password = 4;
   */
  password?: string;

  constructor(data?: PartialMessage<ClientRoomCreate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRoomCreate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomCreate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomCreate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomCreate;

  static equals(a: ClientRoomCreate | PlainMessage<ClientRoomCreate> | undefined, b: ClientRoomCreate | PlainMessage<ClientRoomCreate> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomCreated
 */
export declare class ServerRoomCreated extends Message<ServerRoomCreated> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode: number;

  /**
   * @generated from field: uint32 max_users = 4;
   */
  maxUsers: number;

  /**
   * @generated from field: optional string password = 5;
   */
  password?: string;

  /**
   * @generated from field: bool locked = 6;
   */
  locked: boolean;

  /**
   * @generated from field: repeated NTALT.ServerRoomCreated.User users = 7;
   */
  users: ServerRoomCreated_User[];

  constructor(data?: PartialMessage<ServerRoomCreated>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomCreated";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomCreated;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomCreated;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomCreated;

  static equals(a: ServerRoomCreated | PlainMessage<ServerRoomCreated> | undefined, b: ServerRoomCreated | PlainMessage<ServerRoomCreated> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomCreated.User
 */
export declare class ServerRoomCreated_User extends Message<ServerRoomCreated_User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bool ready = 3;
   */
  ready: boolean;

  /**
   * @generated from field: bool owner = 4;
   */
  owner: boolean;

  constructor(data?: PartialMessage<ServerRoomCreated_User>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomCreated.User";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomCreated_User;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomCreated_User;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomCreated_User;

  static equals(a: ServerRoomCreated_User | PlainMessage<ServerRoomCreated_User> | undefined, b: ServerRoomCreated_User | PlainMessage<ServerRoomCreated_User> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomCreateFailed
 */
export declare class ServerRoomCreateFailed extends Message<ServerRoomCreateFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<ServerRoomCreateFailed>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomCreateFailed";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomCreateFailed;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomCreateFailed;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomCreateFailed;

  static equals(a: ServerRoomCreateFailed | PlainMessage<ServerRoomCreateFailed> | undefined, b: ServerRoomCreateFailed | PlainMessage<ServerRoomCreateFailed> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRoomUpdate
 */
export declare class ClientRoomUpdate extends Message<ClientRoomUpdate> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional uint32 gamemode = 2;
   */
  gamemode?: number;

  /**
   * @generated from field: optional uint32 max_users = 3;
   */
  maxUsers?: number;

  /**
   * @generated from field: optional string password = 4;
   */
  password?: string;

  /**
   * @generated from field: optional bool locked = 5;
   */
  locked?: boolean;

  constructor(data?: PartialMessage<ClientRoomUpdate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRoomUpdate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomUpdate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomUpdate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomUpdate;

  static equals(a: ClientRoomUpdate | PlainMessage<ClientRoomUpdate> | undefined, b: ClientRoomUpdate | PlainMessage<ClientRoomUpdate> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomUpdated
 */
export declare class ServerRoomUpdated extends Message<ServerRoomUpdated> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional uint32 gamemode = 2;
   */
  gamemode?: number;

  /**
   * @generated from field: optional uint32 max_users = 3;
   */
  maxUsers?: number;

  /**
   * @generated from field: optional string password = 4;
   */
  password?: string;

  /**
   * @generated from field: optional bool locked = 5;
   */
  locked?: boolean;

  constructor(data?: PartialMessage<ServerRoomUpdated>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomUpdated";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomUpdated;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomUpdated;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomUpdated;

  static equals(a: ServerRoomUpdated | PlainMessage<ServerRoomUpdated> | undefined, b: ServerRoomUpdated | PlainMessage<ServerRoomUpdated> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomUpdateFailed
 */
export declare class ServerRoomUpdateFailed extends Message<ServerRoomUpdateFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<ServerRoomUpdateFailed>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomUpdateFailed";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomUpdateFailed;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomUpdateFailed;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomUpdateFailed;

  static equals(a: ServerRoomUpdateFailed | PlainMessage<ServerRoomUpdateFailed> | undefined, b: ServerRoomUpdateFailed | PlainMessage<ServerRoomUpdateFailed> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRoomFlagsUpdate
 */
export declare class ClientRoomFlagsUpdate extends Message<ClientRoomFlagsUpdate> {
  /**
   * @generated from field: repeated NTALT.ClientRoomFlagsUpdate.GameFlag flags = 1;
   */
  flags: ClientRoomFlagsUpdate_GameFlag[];

  constructor(data?: PartialMessage<ClientRoomFlagsUpdate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRoomFlagsUpdate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomFlagsUpdate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate;

  static equals(a: ClientRoomFlagsUpdate | PlainMessage<ClientRoomFlagsUpdate> | undefined, b: ClientRoomFlagsUpdate | PlainMessage<ClientRoomFlagsUpdate> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRoomFlagsUpdate.GameFlag
 */
export declare class ClientRoomFlagsUpdate_GameFlag extends Message<ClientRoomFlagsUpdate_GameFlag> {
  /**
   * TODO: This seems like a hack, please improve it
   *
   * @generated from field: string flag = 1;
   */
  flag: string;

  /**
   * @generated from field: optional int32 int_val = 2;
   */
  intVal?: number;

  /**
   * @generated from field: optional string str_val = 3;
   */
  strVal?: string;

  /**
   * @generated from field: optional float float_val = 4;
   */
  floatVal?: number;

  /**
   * @generated from field: optional bool bool_val = 5;
   */
  boolVal?: boolean;

  /**
   * @generated from field: optional uint32 u_int_val = 6;
   */
  uIntVal?: number;

  constructor(data?: PartialMessage<ClientRoomFlagsUpdate_GameFlag>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRoomFlagsUpdate.GameFlag";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomFlagsUpdate_GameFlag;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate_GameFlag;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate_GameFlag;

  static equals(a: ClientRoomFlagsUpdate_GameFlag | PlainMessage<ClientRoomFlagsUpdate_GameFlag> | undefined, b: ClientRoomFlagsUpdate_GameFlag | PlainMessage<ClientRoomFlagsUpdate_GameFlag> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomFlagsUpdated
 */
export declare class ServerRoomFlagsUpdated extends Message<ServerRoomFlagsUpdated> {
  /**
   * @generated from field: repeated NTALT.ServerRoomFlagsUpdated.GameFlag flags = 1;
   */
  flags: ServerRoomFlagsUpdated_GameFlag[];

  constructor(data?: PartialMessage<ServerRoomFlagsUpdated>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomFlagsUpdated";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomFlagsUpdated;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated;

  static equals(a: ServerRoomFlagsUpdated | PlainMessage<ServerRoomFlagsUpdated> | undefined, b: ServerRoomFlagsUpdated | PlainMessage<ServerRoomFlagsUpdated> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomFlagsUpdated.GameFlag
 */
export declare class ServerRoomFlagsUpdated_GameFlag extends Message<ServerRoomFlagsUpdated_GameFlag> {
  /**
   * @generated from field: string flag = 1;
   */
  flag: string;

  /**
   * @generated from field: optional int32 int_val = 2;
   */
  intVal?: number;

  /**
   * @generated from field: optional string str_val = 3;
   */
  strVal?: string;

  /**
   * @generated from field: optional float float_val = 4;
   */
  floatVal?: number;

  /**
   * @generated from field: optional bool bool_val = 5;
   */
  boolVal?: boolean;

  /**
   * @generated from field: optional uint32 u_int_val = 6;
   */
  uIntVal?: number;

  constructor(data?: PartialMessage<ServerRoomFlagsUpdated_GameFlag>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomFlagsUpdated.GameFlag";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomFlagsUpdated_GameFlag;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated_GameFlag;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated_GameFlag;

  static equals(a: ServerRoomFlagsUpdated_GameFlag | PlainMessage<ServerRoomFlagsUpdated_GameFlag> | undefined, b: ServerRoomFlagsUpdated_GameFlag | PlainMessage<ServerRoomFlagsUpdated_GameFlag> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomFlagsUpdateFailed
 */
export declare class ServerRoomFlagsUpdateFailed extends Message<ServerRoomFlagsUpdateFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<ServerRoomFlagsUpdateFailed>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomFlagsUpdateFailed";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomFlagsUpdateFailed;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdateFailed;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdateFailed;

  static equals(a: ServerRoomFlagsUpdateFailed | PlainMessage<ServerRoomFlagsUpdateFailed> | undefined, b: ServerRoomFlagsUpdateFailed | PlainMessage<ServerRoomFlagsUpdateFailed> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientJoinRoom
 */
export declare class ClientJoinRoom extends Message<ClientJoinRoom> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: optional string password = 2;
   */
  password?: string;

  constructor(data?: PartialMessage<ClientJoinRoom>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientJoinRoom";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientJoinRoom;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientJoinRoom;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientJoinRoom;

  static equals(a: ClientJoinRoom | PlainMessage<ClientJoinRoom> | undefined, b: ClientJoinRoom | PlainMessage<ClientJoinRoom> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerJoinRoomSuccess
 */
export declare class ServerJoinRoomSuccess extends Message<ServerJoinRoomSuccess> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode: number;

  /**
   * @generated from field: uint32 max_users = 4;
   */
  maxUsers: number;

  /**
   * @generated from field: optional string password = 5;
   */
  password?: string;

  /**
   * @generated from field: bool locked = 6;
   */
  locked: boolean;

  /**
   * @generated from field: repeated NTALT.ServerJoinRoomSuccess.User users = 7;
   */
  users: ServerJoinRoomSuccess_User[];

  constructor(data?: PartialMessage<ServerJoinRoomSuccess>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerJoinRoomSuccess";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerJoinRoomSuccess;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess;

  static equals(a: ServerJoinRoomSuccess | PlainMessage<ServerJoinRoomSuccess> | undefined, b: ServerJoinRoomSuccess | PlainMessage<ServerJoinRoomSuccess> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerJoinRoomSuccess.User
 */
export declare class ServerJoinRoomSuccess_User extends Message<ServerJoinRoomSuccess_User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bool ready = 3;
   */
  ready: boolean;

  /**
   * @generated from field: bool owner = 4;
   */
  owner: boolean;

  constructor(data?: PartialMessage<ServerJoinRoomSuccess_User>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerJoinRoomSuccess.User";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerJoinRoomSuccess_User;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess_User;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess_User;

  static equals(a: ServerJoinRoomSuccess_User | PlainMessage<ServerJoinRoomSuccess_User> | undefined, b: ServerJoinRoomSuccess_User | PlainMessage<ServerJoinRoomSuccess_User> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerJoinRoomFailed
 */
export declare class ServerJoinRoomFailed extends Message<ServerJoinRoomFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<ServerJoinRoomFailed>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerJoinRoomFailed";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerJoinRoomFailed;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerJoinRoomFailed;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerJoinRoomFailed;

  static equals(a: ServerJoinRoomFailed | PlainMessage<ServerJoinRoomFailed> | undefined, b: ServerJoinRoomFailed | PlainMessage<ServerJoinRoomFailed> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerUserJoinedRoom
 */
export declare class ServerUserJoinedRoom extends Message<ServerUserJoinedRoom> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<ServerUserJoinedRoom>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerUserJoinedRoom";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserJoinedRoom;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserJoinedRoom;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserJoinedRoom;

  static equals(a: ServerUserJoinedRoom | PlainMessage<ServerUserJoinedRoom> | undefined, b: ServerUserJoinedRoom | PlainMessage<ServerUserJoinedRoom> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientLeaveRoom
 */
export declare class ClientLeaveRoom extends Message<ClientLeaveRoom> {
  /**
   * should be empty msg
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ClientLeaveRoom>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientLeaveRoom";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientLeaveRoom;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientLeaveRoom;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientLeaveRoom;

  static equals(a: ClientLeaveRoom | PlainMessage<ClientLeaveRoom> | undefined, b: ClientLeaveRoom | PlainMessage<ClientLeaveRoom> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerUserLeftRoom
 */
export declare class ServerUserLeftRoom extends Message<ServerUserLeftRoom> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ServerUserLeftRoom>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerUserLeftRoom";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserLeftRoom;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserLeftRoom;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserLeftRoom;

  static equals(a: ServerUserLeftRoom | PlainMessage<ServerUserLeftRoom> | undefined, b: ServerUserLeftRoom | PlainMessage<ServerUserLeftRoom> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientKickUser
 */
export declare class ClientKickUser extends Message<ClientKickUser> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ClientKickUser>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientKickUser";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientKickUser;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientKickUser;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientKickUser;

  static equals(a: ClientKickUser | PlainMessage<ClientKickUser> | undefined, b: ClientKickUser | PlainMessage<ClientKickUser> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerUserKicked
 */
export declare class ServerUserKicked extends Message<ServerUserKicked> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ServerUserKicked>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerUserKicked";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserKicked;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserKicked;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserKicked;

  static equals(a: ServerUserKicked | PlainMessage<ServerUserKicked> | undefined, b: ServerUserKicked | PlainMessage<ServerUserKicked> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientBanUser
 */
export declare class ClientBanUser extends Message<ClientBanUser> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ClientBanUser>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientBanUser";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientBanUser;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientBanUser;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientBanUser;

  static equals(a: ClientBanUser | PlainMessage<ClientBanUser> | undefined, b: ClientBanUser | PlainMessage<ClientBanUser> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerUserBanned
 */
export declare class ServerUserBanned extends Message<ServerUserBanned> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  constructor(data?: PartialMessage<ServerUserBanned>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerUserBanned";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserBanned;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserBanned;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserBanned;

  static equals(a: ServerUserBanned | PlainMessage<ServerUserBanned> | undefined, b: ServerUserBanned | PlainMessage<ServerUserBanned> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientReadyState
 */
export declare class ClientReadyState extends Message<ClientReadyState> {
  /**
   * @generated from field: bool ready = 1;
   */
  ready: boolean;

  /**
   * @generated from field: optional string seed = 2;
   */
  seed?: string;

  /**
   * @generated from field: repeated string mods = 3;
   */
  mods: string[];

  /**
   * @generated from field: optional string version = 4;
   */
  version?: string;

  /**
   * @generated from field: optional bool beta = 5;
   */
  beta?: boolean;

  constructor(data?: PartialMessage<ClientReadyState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientReadyState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientReadyState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientReadyState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientReadyState;

  static equals(a: ClientReadyState | PlainMessage<ClientReadyState> | undefined, b: ClientReadyState | PlainMessage<ClientReadyState> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerUserReadyState
 */
export declare class ServerUserReadyState extends Message<ServerUserReadyState> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: bool ready = 2;
   */
  ready: boolean;

  /**
   * @generated from field: optional string seed = 3;
   */
  seed?: string;

  /**
   * @generated from field: repeated string mods = 4;
   */
  mods: string[];

  /**
   * @generated from field: optional string version = 5;
   */
  version?: string;

  /**
   * @generated from field: optional bool beta = 6;
   */
  beta?: boolean;

  constructor(data?: PartialMessage<ServerUserReadyState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerUserReadyState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserReadyState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserReadyState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserReadyState;

  static equals(a: ServerUserReadyState | PlainMessage<ServerUserReadyState> | undefined, b: ServerUserReadyState | PlainMessage<ServerUserReadyState> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientStartRun
 */
export declare class ClientStartRun extends Message<ClientStartRun> {
  /**
   * @generated from field: bool forced = 1;
   */
  forced: boolean;

  constructor(data?: PartialMessage<ClientStartRun>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientStartRun";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStartRun;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStartRun;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStartRun;

  static equals(a: ClientStartRun | PlainMessage<ClientStartRun> | undefined, b: ClientStartRun | PlainMessage<ClientStartRun> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerHostStart
 */
export declare class ServerHostStart extends Message<ServerHostStart> {
  /**
   * @generated from field: bool forced = 1;
   */
  forced: boolean;

  constructor(data?: PartialMessage<ServerHostStart>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerHostStart";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostStart;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostStart;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostStart;

  static equals(a: ServerHostStart | PlainMessage<ServerHostStart> | undefined, b: ServerHostStart | PlainMessage<ServerHostStart> | undefined): boolean;
}

/**
 * @generated from message NTALT.ClientRequestRoomList
 */
export declare class ClientRequestRoomList extends Message<ClientRequestRoomList> {
  /**
   * @generated from field: uint32 page = 1;
   */
  page: number;

  constructor(data?: PartialMessage<ClientRequestRoomList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ClientRequestRoomList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRequestRoomList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRequestRoomList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRequestRoomList;

  static equals(a: ClientRequestRoomList | PlainMessage<ClientRequestRoomList> | undefined, b: ClientRequestRoomList | PlainMessage<ClientRequestRoomList> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomList
 */
export declare class ServerRoomList extends Message<ServerRoomList> {
  /**
   * @generated from field: repeated NTALT.ServerRoomList.Room rooms = 1;
   */
  rooms: ServerRoomList_Room[];

  /**
   * @generated from field: optional uint32 pages = 2;
   */
  pages?: number;

  constructor(data?: PartialMessage<ServerRoomList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomList;

  static equals(a: ServerRoomList | PlainMessage<ServerRoomList> | undefined, b: ServerRoomList | PlainMessage<ServerRoomList> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomList.Room
 */
export declare class ServerRoomList_Room extends Message<ServerRoomList_Room> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode: number;

  /**
   * @generated from field: uint32 cur_users = 4;
   */
  curUsers: number;

  /**
   * @generated from field: uint32 max_users = 5;
   */
  maxUsers: number;

  /**
   * @generated from field: bool protected = 6;
   */
  protected: boolean;

  /**
   * @generated from field: string owner = 7;
   */
  owner: string;

  /**
   * @generated from field: bool locked = 8;
   */
  locked: boolean;

  constructor(data?: PartialMessage<ServerRoomList_Room>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomList.Room";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomList_Room;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomList_Room;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomList_Room;

  static equals(a: ServerRoomList_Room | PlainMessage<ServerRoomList_Room> | undefined, b: ServerRoomList_Room | PlainMessage<ServerRoomList_Room> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomAddToList
 */
export declare class ServerRoomAddToList extends Message<ServerRoomAddToList> {
  /**
   * @generated from field: NTALT.ServerRoomAddToList.Room room = 1;
   */
  room?: ServerRoomAddToList_Room;

  constructor(data?: PartialMessage<ServerRoomAddToList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomAddToList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomAddToList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomAddToList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomAddToList;

  static equals(a: ServerRoomAddToList | PlainMessage<ServerRoomAddToList> | undefined, b: ServerRoomAddToList | PlainMessage<ServerRoomAddToList> | undefined): boolean;
}

/**
 * @generated from message NTALT.ServerRoomAddToList.Room
 */
export declare class ServerRoomAddToList_Room extends Message<ServerRoomAddToList_Room> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode: number;

  /**
   * @generated from field: uint32 cur_users = 4;
   */
  curUsers: number;

  /**
   * @generated from field: uint32 max_users = 5;
   */
  maxUsers: number;

  /**
   * @generated from field: bool protected = 6;
   */
  protected: boolean;

  /**
   * @generated from field: string owner = 7;
   */
  owner: string;

  /**
   * @generated from field: bool locked = 8;
   */
  locked: boolean;

  constructor(data?: PartialMessage<ServerRoomAddToList_Room>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "NTALT.ServerRoomAddToList.Room";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomAddToList_Room;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomAddToList_Room;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomAddToList_Room;

  static equals(a: ServerRoomAddToList_Room | PlainMessage<ServerRoomAddToList_Room> | undefined, b: ServerRoomAddToList_Room | PlainMessage<ServerRoomAddToList_Room> | undefined): boolean;
}

