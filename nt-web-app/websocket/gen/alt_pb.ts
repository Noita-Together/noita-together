// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file alt.proto (package NTALT, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message NTALT.Envelope
 */
export class Envelope extends Message<Envelope> {
  /**
   * @generated from oneof NTALT.Envelope.kind
   */
  kind: {
    /**
     * @generated from field: NTALT.GameAction game_action = 1;
     */
    value: GameAction;
    case: "gameAction";
  } | {
    /**
     * @generated from field: NTALT.LobbyAction lobby_action = 50;
     */
    value: LobbyAction;
    case: "lobbyAction";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Envelope>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Envelope";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_action", kind: "message", T: GameAction, oneof: "kind" },
    { no: 50, name: "lobby_action", kind: "message", T: LobbyAction, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Envelope {
    return new Envelope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Envelope {
    return new Envelope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Envelope {
    return new Envelope().fromJsonString(jsonString, options);
  }

  static equals(a: Envelope | PlainMessage<Envelope> | undefined, b: Envelope | PlainMessage<Envelope> | undefined): boolean {
    return proto3.util.equals(Envelope, a, b);
  }
}

/**
 * @generated from message NTALT.GameAction
 */
export class GameAction extends Message<GameAction> {
  /**
   * The c prefix stands for "client", which refers to this application
   * The s prefix stands for "server", which refers to the online Noita game server
   *
   * @generated from oneof NTALT.GameAction.action
   */
  action: {
    /**
     * @generated from field: NTALT.PlayerMove player_move = 1;
     */
    value: PlayerMove;
    case: "playerMove";
  } | {
    /**
     * @generated from field: NTALT.PlayerPosition player_position = 2;
     */
    value: PlayerPosition;
    case: "playerPosition";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerUpdate c_player_update = 3;
     */
    value: ClientPlayerUpdate;
    case: "cPlayerUpdate";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerUpdate s_player_update = 4;
     */
    value: ServerPlayerUpdate;
    case: "sPlayerUpdate";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerUpdateInventory c_player_update_inventory = 5;
     */
    value: ClientPlayerUpdateInventory;
    case: "cPlayerUpdateInventory";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerUpdateInventory s_player_update_inventory = 6;
     */
    value: ServerPlayerUpdateInventory;
    case: "sPlayerUpdateInventory";
  } | {
    /**
     * @generated from field: NTALT.ClientHostItemBank c_host_item_bank = 7;
     */
    value: ClientHostItemBank;
    case: "cHostItemBank";
  } | {
    /**
     * @generated from field: NTALT.ServerHostItemBank s_host_item_bank = 8;
     */
    value: ServerHostItemBank;
    case: "sHostItemBank";
  } | {
    /**
     * @generated from field: NTALT.ClientHostUserTake c_host_user_take = 9;
     */
    value: ClientHostUserTake;
    case: "cHostUserTake";
  } | {
    /**
     * @generated from field: NTALT.ServerHostUserTake s_host_user_take = 10;
     */
    value: ServerHostUserTake;
    case: "sHostUserTake";
  } | {
    /**
     * @generated from field: NTALT.ClientHostUserTakeGold c_host_user_take_gold = 11;
     */
    value: ClientHostUserTakeGold;
    case: "cHostUserTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ServerHostUserTakeGold s_host_user_take_gold = 12;
     */
    value: ServerHostUserTakeGold;
    case: "sHostUserTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddGold c_player_add_gold = 13;
     */
    value: ClientPlayerAddGold;
    case: "cPlayerAddGold";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddGold s_player_add_gold = 14;
     */
    value: ServerPlayerAddGold;
    case: "sPlayerAddGold";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerTakeGold c_player_take_gold = 15;
     */
    value: ClientPlayerTakeGold;
    case: "cPlayerTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerTakeGold s_player_take_gold = 16;
     */
    value: ServerPlayerTakeGold;
    case: "sPlayerTakeGold";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem c_player_add_item = 17;
     */
    value: ClientPlayerAddItem;
    case: "cPlayerAddItem";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem s_player_add_item = 18;
     */
    value: ServerPlayerAddItem;
    case: "sPlayerAddItem";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerTakeItem c_player_take_item = 19;
     */
    value: ClientPlayerTakeItem;
    case: "cPlayerTakeItem";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerTakeItem s_player_take_item = 20;
     */
    value: ServerPlayerTakeItem;
    case: "sPlayerTakeItem";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerPickup c_player_pickup = 21;
     */
    value: ClientPlayerPickup;
    case: "cPlayerPickup";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerPickup s_player_pickup = 22;
     */
    value: ServerPlayerPickup;
    case: "sPlayerPickup";
  } | {
    /**
     * @generated from field: NTALT.ClientNemesisAbility c_nemesis_ability = 23;
     */
    value: ClientNemesisAbility;
    case: "cNemesisAbility";
  } | {
    /**
     * @generated from field: NTALT.ServerNemesisAbility s_nemesis_ability = 24;
     */
    value: ServerNemesisAbility;
    case: "sNemesisAbility";
  } | {
    /**
     * @generated from field: NTALT.ClientNemesisPickupItem c_nemesis_pickup_item = 25;
     */
    value: ClientNemesisPickupItem;
    case: "cNemesisPickupItem";
  } | {
    /**
     * @generated from field: NTALT.ServerNemesisPickupItem s_nemesis_pickup_item = 26;
     */
    value: ServerNemesisPickupItem;
    case: "sNemesisPickupItem";
  } | {
    /**
     * @generated from field: NTALT.ClientChat c_chat = 27;
     */
    value: ClientChat;
    case: "cChat";
  } | {
    /**
     * @generated from field: NTALT.ServerChat s_chat = 28;
     */
    value: ServerChat;
    case: "sChat";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerDeath c_player_death = 29;
     */
    value: ClientPlayerDeath;
    case: "cPlayerDeath";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerDeath s_player_death = 30;
     */
    value: ServerPlayerDeath;
    case: "sPlayerDeath";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerNewGamePlus c_player_new_game_plus = 31;
     */
    value: ClientPlayerNewGamePlus;
    case: "cPlayerNewGamePlus";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerNewGamePlus s_player_new_game_plus = 32;
     */
    value: ServerPlayerNewGamePlus;
    case: "sPlayerNewGamePlus";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerSecretHourglass c_player_secret_hourglass = 33;
     */
    value: ClientPlayerSecretHourglass;
    case: "cPlayerSecretHourglass";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerSecretHourglass s_player_secret_hourglass = 34;
     */
    value: ServerPlayerSecretHourglass;
    case: "sPlayerSecretHourglass";
  } | {
    /**
     * @generated from field: NTALT.ClientCustomModEvent c_custom_mod_event = 35;
     */
    value: ClientCustomModEvent;
    case: "cCustomModEvent";
  } | {
    /**
     * @generated from field: NTALT.ServerCustomModEvent s_custom_mod_event = 36;
     */
    value: ServerCustomModEvent;
    case: "sCustomModEvent";
  } | {
    /**
     * @generated from field: NTALT.ClientRespawnPenalty c_respawn_penalty = 37;
     */
    value: ClientRespawnPenalty;
    case: "cRespawnPenalty";
  } | {
    /**
     * @generated from field: NTALT.ServerRespawnPenalty s_respawn_penalty = 38;
     */
    value: ServerRespawnPenalty;
    case: "sRespawnPenalty";
  } | {
    /**
     * @generated from field: NTALT.ClientAngerySteve c_angery_steve = 39;
     */
    value: ClientAngerySteve;
    case: "cAngerySteve";
  } | {
    /**
     * @generated from field: NTALT.ServerAngerySteve s_angery_steve = 40;
     */
    value: ServerAngerySteve;
    case: "sAngerySteve";
  } | {
    /**
     * @generated from field: NTALT.ServerStatsUpdate s_stat_update = 42;
     */
    value: ServerStatsUpdate;
    case: "sStatUpdate";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GameAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.GameAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_move", kind: "message", T: PlayerMove, oneof: "action" },
    { no: 2, name: "player_position", kind: "message", T: PlayerPosition, oneof: "action" },
    { no: 3, name: "c_player_update", kind: "message", T: ClientPlayerUpdate, oneof: "action" },
    { no: 4, name: "s_player_update", kind: "message", T: ServerPlayerUpdate, oneof: "action" },
    { no: 5, name: "c_player_update_inventory", kind: "message", T: ClientPlayerUpdateInventory, oneof: "action" },
    { no: 6, name: "s_player_update_inventory", kind: "message", T: ServerPlayerUpdateInventory, oneof: "action" },
    { no: 7, name: "c_host_item_bank", kind: "message", T: ClientHostItemBank, oneof: "action" },
    { no: 8, name: "s_host_item_bank", kind: "message", T: ServerHostItemBank, oneof: "action" },
    { no: 9, name: "c_host_user_take", kind: "message", T: ClientHostUserTake, oneof: "action" },
    { no: 10, name: "s_host_user_take", kind: "message", T: ServerHostUserTake, oneof: "action" },
    { no: 11, name: "c_host_user_take_gold", kind: "message", T: ClientHostUserTakeGold, oneof: "action" },
    { no: 12, name: "s_host_user_take_gold", kind: "message", T: ServerHostUserTakeGold, oneof: "action" },
    { no: 13, name: "c_player_add_gold", kind: "message", T: ClientPlayerAddGold, oneof: "action" },
    { no: 14, name: "s_player_add_gold", kind: "message", T: ServerPlayerAddGold, oneof: "action" },
    { no: 15, name: "c_player_take_gold", kind: "message", T: ClientPlayerTakeGold, oneof: "action" },
    { no: 16, name: "s_player_take_gold", kind: "message", T: ServerPlayerTakeGold, oneof: "action" },
    { no: 17, name: "c_player_add_item", kind: "message", T: ClientPlayerAddItem, oneof: "action" },
    { no: 18, name: "s_player_add_item", kind: "message", T: ServerPlayerAddItem, oneof: "action" },
    { no: 19, name: "c_player_take_item", kind: "message", T: ClientPlayerTakeItem, oneof: "action" },
    { no: 20, name: "s_player_take_item", kind: "message", T: ServerPlayerTakeItem, oneof: "action" },
    { no: 21, name: "c_player_pickup", kind: "message", T: ClientPlayerPickup, oneof: "action" },
    { no: 22, name: "s_player_pickup", kind: "message", T: ServerPlayerPickup, oneof: "action" },
    { no: 23, name: "c_nemesis_ability", kind: "message", T: ClientNemesisAbility, oneof: "action" },
    { no: 24, name: "s_nemesis_ability", kind: "message", T: ServerNemesisAbility, oneof: "action" },
    { no: 25, name: "c_nemesis_pickup_item", kind: "message", T: ClientNemesisPickupItem, oneof: "action" },
    { no: 26, name: "s_nemesis_pickup_item", kind: "message", T: ServerNemesisPickupItem, oneof: "action" },
    { no: 27, name: "c_chat", kind: "message", T: ClientChat, oneof: "action" },
    { no: 28, name: "s_chat", kind: "message", T: ServerChat, oneof: "action" },
    { no: 29, name: "c_player_death", kind: "message", T: ClientPlayerDeath, oneof: "action" },
    { no: 30, name: "s_player_death", kind: "message", T: ServerPlayerDeath, oneof: "action" },
    { no: 31, name: "c_player_new_game_plus", kind: "message", T: ClientPlayerNewGamePlus, oneof: "action" },
    { no: 32, name: "s_player_new_game_plus", kind: "message", T: ServerPlayerNewGamePlus, oneof: "action" },
    { no: 33, name: "c_player_secret_hourglass", kind: "message", T: ClientPlayerSecretHourglass, oneof: "action" },
    { no: 34, name: "s_player_secret_hourglass", kind: "message", T: ServerPlayerSecretHourglass, oneof: "action" },
    { no: 35, name: "c_custom_mod_event", kind: "message", T: ClientCustomModEvent, oneof: "action" },
    { no: 36, name: "s_custom_mod_event", kind: "message", T: ServerCustomModEvent, oneof: "action" },
    { no: 37, name: "c_respawn_penalty", kind: "message", T: ClientRespawnPenalty, oneof: "action" },
    { no: 38, name: "s_respawn_penalty", kind: "message", T: ServerRespawnPenalty, oneof: "action" },
    { no: 39, name: "c_angery_steve", kind: "message", T: ClientAngerySteve, oneof: "action" },
    { no: 40, name: "s_angery_steve", kind: "message", T: ServerAngerySteve, oneof: "action" },
    { no: 42, name: "s_stat_update", kind: "message", T: ServerStatsUpdate, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameAction {
    return new GameAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameAction {
    return new GameAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameAction {
    return new GameAction().fromJsonString(jsonString, options);
  }

  static equals(a: GameAction | PlainMessage<GameAction> | undefined, b: GameAction | PlainMessage<GameAction> | undefined): boolean {
    return proto3.util.equals(GameAction, a, b);
  }
}

/**
 * @generated from message NTALT.PlayerFrame
 */
export class PlayerFrame extends Message<PlayerFrame> {
  /**
   * @generated from field: optional float x = 1;
   */
  x?: number;

  /**
   * @generated from field: optional float y = 2;
   */
  y?: number;

  /**
   * @generated from field: optional float arm_r = 3;
   */
  armR?: number;

  /**
   * @generated from field: optional float arm_scale_y = 4;
   */
  armScaleY?: number;

  /**
   * @generated from field: optional float scale_x = 5;
   */
  scaleX?: number;

  /**
   * @generated from field: optional int32 anim = 6;
   */
  anim?: number;

  /**
   * @generated from field: optional int32 held = 7;
   */
  held?: number;

  constructor(data?: PartialMessage<PlayerFrame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.PlayerFrame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "y", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "arm_r", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "arm_scale_y", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "scale_x", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 6, name: "anim", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "held", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerFrame {
    return new PlayerFrame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerFrame {
    return new PlayerFrame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerFrame {
    return new PlayerFrame().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerFrame | PlainMessage<PlayerFrame> | undefined, b: PlayerFrame | PlainMessage<PlayerFrame> | undefined): boolean {
    return proto3.util.equals(PlayerFrame, a, b);
  }
}

/**
 * @generated from message NTALT.PlayerMove
 */
export class PlayerMove extends Message<PlayerMove> {
  /**
   * @generated from field: repeated NTALT.PlayerFrame frames = 1;
   */
  frames: PlayerFrame[] = [];

  /**
   * @generated from field: string user_id = 15;
   */
  userId = "";

  constructor(data?: PartialMessage<PlayerMove>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.PlayerMove";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frames", kind: "message", T: PlayerFrame, repeated: true },
    { no: 15, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerMove {
    return new PlayerMove().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerMove {
    return new PlayerMove().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerMove {
    return new PlayerMove().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerMove | PlainMessage<PlayerMove> | undefined, b: PlayerMove | PlainMessage<PlayerMove> | undefined): boolean {
    return proto3.util.equals(PlayerMove, a, b);
  }
}

/**
 * @generated from message NTALT.PlayerPosition
 */
export class PlayerPosition extends Message<PlayerPosition> {
  /**
   * @generated from field: NTALT.PlayerFrame frame = 1;
   */
  frame?: PlayerFrame;

  /**
   * @generated from field: string user_id = 15;
   */
  userId = "";

  constructor(data?: PartialMessage<PlayerPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.PlayerPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frame", kind: "message", T: PlayerFrame },
    { no: 15, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerPosition {
    return new PlayerPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerPosition {
    return new PlayerPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerPosition {
    return new PlayerPosition().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerPosition | PlainMessage<PlayerPosition> | undefined, b: PlayerPosition | PlainMessage<PlayerPosition> | undefined): boolean {
    return proto3.util.equals(PlayerPosition, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerUpdate
 */
export class ClientPlayerUpdate extends Message<ClientPlayerUpdate> {
  /**
   * @generated from field: optional float cur_hp = 1;
   */
  curHp?: number;

  /**
   * @generated from field: optional float max_hp = 2;
   */
  maxHp?: number;

  /**
   * @generated from field: optional string location = 3;
   */
  location?: string;

  /**
   * @generated from field: optional bool sampo = 4;
   */
  sampo?: boolean;

  constructor(data?: PartialMessage<ClientPlayerUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cur_hp", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "max_hp", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "sampo", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdate {
    return new ClientPlayerUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdate {
    return new ClientPlayerUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdate {
    return new ClientPlayerUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerUpdate | PlainMessage<ClientPlayerUpdate> | undefined, b: ClientPlayerUpdate | PlainMessage<ClientPlayerUpdate> | undefined): boolean {
    return proto3.util.equals(ClientPlayerUpdate, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerUpdate
 */
export class ServerPlayerUpdate extends Message<ServerPlayerUpdate> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: optional float cur_hp = 2;
   */
  curHp?: number;

  /**
   * @generated from field: optional float max_hp = 3;
   */
  maxHp?: number;

  /**
   * @generated from field: optional string location = 4;
   */
  location?: string;

  /**
   * @generated from field: optional bool sampo = 5;
   */
  sampo?: boolean;

  constructor(data?: PartialMessage<ServerPlayerUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cur_hp", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "max_hp", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "sampo", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdate {
    return new ServerPlayerUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdate {
    return new ServerPlayerUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdate {
    return new ServerPlayerUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerUpdate | PlainMessage<ServerPlayerUpdate> | undefined, b: ServerPlayerUpdate | PlainMessage<ServerPlayerUpdate> | undefined): boolean {
    return proto3.util.equals(ServerPlayerUpdate, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory
 */
export class ClientPlayerUpdateInventory extends Message<ClientPlayerUpdateInventory> {
  /**
   * @generated from field: repeated NTALT.ClientPlayerUpdateInventory.InventoryWand wands = 1;
   */
  wands: ClientPlayerUpdateInventory_InventoryWand[] = [];

  /**
   * @generated from field: repeated NTALT.ClientPlayerUpdateInventory.InventoryItem items = 2;
   */
  items: ClientPlayerUpdateInventory_InventoryItem[] = [];

  /**
   * @generated from field: repeated NTALT.ClientPlayerUpdateInventory.InventorySpell spells = 3;
   */
  spells: ClientPlayerUpdateInventory_InventorySpell[] = [];

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wands", kind: "message", T: ClientPlayerUpdateInventory_InventoryWand, repeated: true },
    { no: 2, name: "items", kind: "message", T: ClientPlayerUpdateInventory_InventoryItem, repeated: true },
    { no: 3, name: "spells", kind: "message", T: ClientPlayerUpdateInventory_InventorySpell, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory {
    return new ClientPlayerUpdateInventory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory {
    return new ClientPlayerUpdateInventory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory {
    return new ClientPlayerUpdateInventory().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerUpdateInventory | PlainMessage<ClientPlayerUpdateInventory> | undefined, b: ClientPlayerUpdateInventory | PlainMessage<ClientPlayerUpdateInventory> | undefined): boolean {
    return proto3.util.equals(ClientPlayerUpdateInventory, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory.InventoryWand
 */
export class ClientPlayerUpdateInventory_InventoryWand extends Message<ClientPlayerUpdateInventory_InventoryWand> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: NTALT.Wand wand = 2;
   */
  wand?: Wand;

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory_InventoryWand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory.InventoryWand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "wand", kind: "message", T: Wand },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory_InventoryWand {
    return new ClientPlayerUpdateInventory_InventoryWand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryWand {
    return new ClientPlayerUpdateInventory_InventoryWand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryWand {
    return new ClientPlayerUpdateInventory_InventoryWand().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerUpdateInventory_InventoryWand | PlainMessage<ClientPlayerUpdateInventory_InventoryWand> | undefined, b: ClientPlayerUpdateInventory_InventoryWand | PlainMessage<ClientPlayerUpdateInventory_InventoryWand> | undefined): boolean {
    return proto3.util.equals(ClientPlayerUpdateInventory_InventoryWand, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory.InventoryItem
 */
export class ClientPlayerUpdateInventory_InventoryItem extends Message<ClientPlayerUpdateInventory_InventoryItem> {
  /**
   * @generated from field: uint32 index = 3;
   */
  index = 0;

  /**
   * @generated from field: NTALT.Item item = 4;
   */
  item?: Item;

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory_InventoryItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory.InventoryItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory_InventoryItem {
    return new ClientPlayerUpdateInventory_InventoryItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryItem {
    return new ClientPlayerUpdateInventory_InventoryItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventoryItem {
    return new ClientPlayerUpdateInventory_InventoryItem().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerUpdateInventory_InventoryItem | PlainMessage<ClientPlayerUpdateInventory_InventoryItem> | undefined, b: ClientPlayerUpdateInventory_InventoryItem | PlainMessage<ClientPlayerUpdateInventory_InventoryItem> | undefined): boolean {
    return proto3.util.equals(ClientPlayerUpdateInventory_InventoryItem, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerUpdateInventory.InventorySpell
 */
export class ClientPlayerUpdateInventory_InventorySpell extends Message<ClientPlayerUpdateInventory_InventorySpell> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: NTALT.Spell spell = 2;
   */
  spell?: Spell;

  constructor(data?: PartialMessage<ClientPlayerUpdateInventory_InventorySpell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerUpdateInventory.InventorySpell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "spell", kind: "message", T: Spell },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerUpdateInventory_InventorySpell {
    return new ClientPlayerUpdateInventory_InventorySpell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventorySpell {
    return new ClientPlayerUpdateInventory_InventorySpell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerUpdateInventory_InventorySpell {
    return new ClientPlayerUpdateInventory_InventorySpell().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerUpdateInventory_InventorySpell | PlainMessage<ClientPlayerUpdateInventory_InventorySpell> | undefined, b: ClientPlayerUpdateInventory_InventorySpell | PlainMessage<ClientPlayerUpdateInventory_InventorySpell> | undefined): boolean {
    return proto3.util.equals(ClientPlayerUpdateInventory_InventorySpell, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory
 */
export class ServerPlayerUpdateInventory extends Message<ServerPlayerUpdateInventory> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: repeated NTALT.ServerPlayerUpdateInventory.InventoryWand wands = 2;
   */
  wands: ServerPlayerUpdateInventory_InventoryWand[] = [];

  /**
   * @generated from field: repeated NTALT.ServerPlayerUpdateInventory.InventoryItem items = 3;
   */
  items: ServerPlayerUpdateInventory_InventoryItem[] = [];

  /**
   * @generated from field: repeated NTALT.ServerPlayerUpdateInventory.InventorySpell spells = 4;
   */
  spells: ServerPlayerUpdateInventory_InventorySpell[] = [];

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wands", kind: "message", T: ServerPlayerUpdateInventory_InventoryWand, repeated: true },
    { no: 3, name: "items", kind: "message", T: ServerPlayerUpdateInventory_InventoryItem, repeated: true },
    { no: 4, name: "spells", kind: "message", T: ServerPlayerUpdateInventory_InventorySpell, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory {
    return new ServerPlayerUpdateInventory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory {
    return new ServerPlayerUpdateInventory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory {
    return new ServerPlayerUpdateInventory().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerUpdateInventory | PlainMessage<ServerPlayerUpdateInventory> | undefined, b: ServerPlayerUpdateInventory | PlainMessage<ServerPlayerUpdateInventory> | undefined): boolean {
    return proto3.util.equals(ServerPlayerUpdateInventory, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory.InventoryWand
 */
export class ServerPlayerUpdateInventory_InventoryWand extends Message<ServerPlayerUpdateInventory_InventoryWand> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: NTALT.Wand wand = 2;
   */
  wand?: Wand;

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory_InventoryWand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory.InventoryWand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "wand", kind: "message", T: Wand },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory_InventoryWand {
    return new ServerPlayerUpdateInventory_InventoryWand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryWand {
    return new ServerPlayerUpdateInventory_InventoryWand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryWand {
    return new ServerPlayerUpdateInventory_InventoryWand().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerUpdateInventory_InventoryWand | PlainMessage<ServerPlayerUpdateInventory_InventoryWand> | undefined, b: ServerPlayerUpdateInventory_InventoryWand | PlainMessage<ServerPlayerUpdateInventory_InventoryWand> | undefined): boolean {
    return proto3.util.equals(ServerPlayerUpdateInventory_InventoryWand, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory.InventoryItem
 */
export class ServerPlayerUpdateInventory_InventoryItem extends Message<ServerPlayerUpdateInventory_InventoryItem> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: NTALT.Item item = 2;
   */
  item?: Item;

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory_InventoryItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory.InventoryItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "item", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory_InventoryItem {
    return new ServerPlayerUpdateInventory_InventoryItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryItem {
    return new ServerPlayerUpdateInventory_InventoryItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventoryItem {
    return new ServerPlayerUpdateInventory_InventoryItem().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerUpdateInventory_InventoryItem | PlainMessage<ServerPlayerUpdateInventory_InventoryItem> | undefined, b: ServerPlayerUpdateInventory_InventoryItem | PlainMessage<ServerPlayerUpdateInventory_InventoryItem> | undefined): boolean {
    return proto3.util.equals(ServerPlayerUpdateInventory_InventoryItem, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerUpdateInventory.InventorySpell
 */
export class ServerPlayerUpdateInventory_InventorySpell extends Message<ServerPlayerUpdateInventory_InventorySpell> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: NTALT.Spell spell = 2;
   */
  spell?: Spell;

  constructor(data?: PartialMessage<ServerPlayerUpdateInventory_InventorySpell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerUpdateInventory.InventorySpell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "spell", kind: "message", T: Spell },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerUpdateInventory_InventorySpell {
    return new ServerPlayerUpdateInventory_InventorySpell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventorySpell {
    return new ServerPlayerUpdateInventory_InventorySpell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerUpdateInventory_InventorySpell {
    return new ServerPlayerUpdateInventory_InventorySpell().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerUpdateInventory_InventorySpell | PlainMessage<ServerPlayerUpdateInventory_InventorySpell> | undefined, b: ServerPlayerUpdateInventory_InventorySpell | PlainMessage<ServerPlayerUpdateInventory_InventorySpell> | undefined): boolean {
    return proto3.util.equals(ServerPlayerUpdateInventory_InventorySpell, a, b);
  }
}

/**
 * @generated from message NTALT.ClientHostItemBank
 */
export class ClientHostItemBank extends Message<ClientHostItemBank> {
  /**
   * @generated from field: repeated NTALT.Wand wands = 1;
   */
  wands: Wand[] = [];

  /**
   * @generated from field: repeated NTALT.Spell spells = 2;
   */
  spells: Spell[] = [];

  /**
   * @generated from field: repeated NTALT.Item items = 3;
   */
  items: Item[] = [];

  /**
   * @generated from field: uint32 gold = 4;
   */
  gold = 0;

  /**
   * @generated from field: repeated NTALT.EntityItem objects = 5;
   */
  objects: EntityItem[] = [];

  constructor(data?: PartialMessage<ClientHostItemBank>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientHostItemBank";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wands", kind: "message", T: Wand, repeated: true },
    { no: 2, name: "spells", kind: "message", T: Spell, repeated: true },
    { no: 3, name: "items", kind: "message", T: Item, repeated: true },
    { no: 4, name: "gold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "objects", kind: "message", T: EntityItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientHostItemBank {
    return new ClientHostItemBank().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientHostItemBank {
    return new ClientHostItemBank().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientHostItemBank {
    return new ClientHostItemBank().fromJsonString(jsonString, options);
  }

  static equals(a: ClientHostItemBank | PlainMessage<ClientHostItemBank> | undefined, b: ClientHostItemBank | PlainMessage<ClientHostItemBank> | undefined): boolean {
    return proto3.util.equals(ClientHostItemBank, a, b);
  }
}

/**
 * @generated from message NTALT.ServerHostItemBank
 */
export class ServerHostItemBank extends Message<ServerHostItemBank> {
  /**
   * @generated from field: repeated NTALT.Wand wands = 1;
   */
  wands: Wand[] = [];

  /**
   * @generated from field: repeated NTALT.Spell spells = 2;
   */
  spells: Spell[] = [];

  /**
   * @generated from field: repeated NTALT.Item items = 3;
   */
  items: Item[] = [];

  /**
   * @generated from field: uint32 gold = 4;
   */
  gold = 0;

  /**
   * @generated from field: repeated NTALT.EntityItem objects = 5;
   */
  objects: EntityItem[] = [];

  constructor(data?: PartialMessage<ServerHostItemBank>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerHostItemBank";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wands", kind: "message", T: Wand, repeated: true },
    { no: 2, name: "spells", kind: "message", T: Spell, repeated: true },
    { no: 3, name: "items", kind: "message", T: Item, repeated: true },
    { no: 4, name: "gold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "objects", kind: "message", T: EntityItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostItemBank {
    return new ServerHostItemBank().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostItemBank {
    return new ServerHostItemBank().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostItemBank {
    return new ServerHostItemBank().fromJsonString(jsonString, options);
  }

  static equals(a: ServerHostItemBank | PlainMessage<ServerHostItemBank> | undefined, b: ServerHostItemBank | PlainMessage<ServerHostItemBank> | undefined): boolean {
    return proto3.util.equals(ServerHostItemBank, a, b);
  }
}

/**
 * @generated from message NTALT.ClientHostUserTake
 */
export class ClientHostUserTake extends Message<ClientHostUserTake> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<ClientHostUserTake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientHostUserTake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientHostUserTake {
    return new ClientHostUserTake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientHostUserTake {
    return new ClientHostUserTake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientHostUserTake {
    return new ClientHostUserTake().fromJsonString(jsonString, options);
  }

  static equals(a: ClientHostUserTake | PlainMessage<ClientHostUserTake> | undefined, b: ClientHostUserTake | PlainMessage<ClientHostUserTake> | undefined): boolean {
    return proto3.util.equals(ClientHostUserTake, a, b);
  }
}

/**
 * @generated from message NTALT.ServerHostUserTake
 */
export class ServerHostUserTake extends Message<ServerHostUserTake> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<ServerHostUserTake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerHostUserTake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostUserTake {
    return new ServerHostUserTake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostUserTake {
    return new ServerHostUserTake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostUserTake {
    return new ServerHostUserTake().fromJsonString(jsonString, options);
  }

  static equals(a: ServerHostUserTake | PlainMessage<ServerHostUserTake> | undefined, b: ServerHostUserTake | PlainMessage<ServerHostUserTake> | undefined): boolean {
    return proto3.util.equals(ServerHostUserTake, a, b);
  }
}

/**
 * @generated from message NTALT.ClientHostUserTakeGold
 */
export class ClientHostUserTakeGold extends Message<ClientHostUserTakeGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount = 0;

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<ClientHostUserTakeGold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientHostUserTakeGold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientHostUserTakeGold {
    return new ClientHostUserTakeGold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientHostUserTakeGold {
    return new ClientHostUserTakeGold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientHostUserTakeGold {
    return new ClientHostUserTakeGold().fromJsonString(jsonString, options);
  }

  static equals(a: ClientHostUserTakeGold | PlainMessage<ClientHostUserTakeGold> | undefined, b: ClientHostUserTakeGold | PlainMessage<ClientHostUserTakeGold> | undefined): boolean {
    return proto3.util.equals(ClientHostUserTakeGold, a, b);
  }
}

/**
 * @generated from message NTALT.ServerHostUserTakeGold
 */
export class ServerHostUserTakeGold extends Message<ServerHostUserTakeGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount = 0;

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<ServerHostUserTakeGold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerHostUserTakeGold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostUserTakeGold {
    return new ServerHostUserTakeGold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostUserTakeGold {
    return new ServerHostUserTakeGold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostUserTakeGold {
    return new ServerHostUserTakeGold().fromJsonString(jsonString, options);
  }

  static equals(a: ServerHostUserTakeGold | PlainMessage<ServerHostUserTakeGold> | undefined, b: ServerHostUserTakeGold | PlainMessage<ServerHostUserTakeGold> | undefined): boolean {
    return proto3.util.equals(ServerHostUserTakeGold, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerAddGold
 */
export class ClientPlayerAddGold extends Message<ClientPlayerAddGold> {
  /**
   * @generated from field: uint32 amount = 1;
   */
  amount = 0;

  constructor(data?: PartialMessage<ClientPlayerAddGold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerAddGold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddGold {
    return new ClientPlayerAddGold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddGold {
    return new ClientPlayerAddGold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddGold {
    return new ClientPlayerAddGold().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerAddGold | PlainMessage<ClientPlayerAddGold> | undefined, b: ClientPlayerAddGold | PlainMessage<ClientPlayerAddGold> | undefined): boolean {
    return proto3.util.equals(ClientPlayerAddGold, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerAddGold
 */
export class ServerPlayerAddGold extends Message<ServerPlayerAddGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount = 0;

  constructor(data?: PartialMessage<ServerPlayerAddGold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerAddGold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddGold {
    return new ServerPlayerAddGold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddGold {
    return new ServerPlayerAddGold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddGold {
    return new ServerPlayerAddGold().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerAddGold | PlainMessage<ServerPlayerAddGold> | undefined, b: ServerPlayerAddGold | PlainMessage<ServerPlayerAddGold> | undefined): boolean {
    return proto3.util.equals(ServerPlayerAddGold, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerTakeGold
 */
export class ClientPlayerTakeGold extends Message<ClientPlayerTakeGold> {
  /**
   * @generated from field: uint32 amount = 1;
   */
  amount = 0;

  constructor(data?: PartialMessage<ClientPlayerTakeGold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerTakeGold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerTakeGold {
    return new ClientPlayerTakeGold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerTakeGold {
    return new ClientPlayerTakeGold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerTakeGold {
    return new ClientPlayerTakeGold().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerTakeGold | PlainMessage<ClientPlayerTakeGold> | undefined, b: ClientPlayerTakeGold | PlainMessage<ClientPlayerTakeGold> | undefined): boolean {
    return proto3.util.equals(ClientPlayerTakeGold, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerTakeGold
 */
export class ServerPlayerTakeGold extends Message<ServerPlayerTakeGold> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount = 0;

  constructor(data?: PartialMessage<ServerPlayerTakeGold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerTakeGold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerTakeGold {
    return new ServerPlayerTakeGold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerTakeGold {
    return new ServerPlayerTakeGold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerTakeGold {
    return new ServerPlayerTakeGold().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerTakeGold | PlainMessage<ServerPlayerTakeGold> | undefined, b: ServerPlayerTakeGold | PlainMessage<ServerPlayerTakeGold> | undefined): boolean {
    return proto3.util.equals(ServerPlayerTakeGold, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerAddItem
 */
export class ClientPlayerAddItem extends Message<ClientPlayerAddItem> {
  /**
   * @generated from oneof NTALT.ClientPlayerAddItem.item
   */
  item: {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Spells spells = 1;
     */
    value: ClientPlayerAddItem_Spells;
    case: "spells";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Wands wands = 2;
     */
    value: ClientPlayerAddItem_Wands;
    case: "wands";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Items flasks = 3;
     */
    value: ClientPlayerAddItem_Items;
    case: "flasks";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerAddItem.Entities objects = 4;
     */
    value: ClientPlayerAddItem_Entities;
    case: "objects";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClientPlayerAddItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spells", kind: "message", T: ClientPlayerAddItem_Spells, oneof: "item" },
    { no: 2, name: "wands", kind: "message", T: ClientPlayerAddItem_Wands, oneof: "item" },
    { no: 3, name: "flasks", kind: "message", T: ClientPlayerAddItem_Items, oneof: "item" },
    { no: 4, name: "objects", kind: "message", T: ClientPlayerAddItem_Entities, oneof: "item" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem {
    return new ClientPlayerAddItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem {
    return new ClientPlayerAddItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem {
    return new ClientPlayerAddItem().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerAddItem | PlainMessage<ClientPlayerAddItem> | undefined, b: ClientPlayerAddItem | PlainMessage<ClientPlayerAddItem> | undefined): boolean {
    return proto3.util.equals(ClientPlayerAddItem, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Spells
 */
export class ClientPlayerAddItem_Spells extends Message<ClientPlayerAddItem_Spells> {
  /**
   * @generated from field: repeated NTALT.Spell list = 1;
   */
  list: Spell[] = [];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Spells>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Spells";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Spell, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Spells {
    return new ClientPlayerAddItem_Spells().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Spells {
    return new ClientPlayerAddItem_Spells().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Spells {
    return new ClientPlayerAddItem_Spells().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerAddItem_Spells | PlainMessage<ClientPlayerAddItem_Spells> | undefined, b: ClientPlayerAddItem_Spells | PlainMessage<ClientPlayerAddItem_Spells> | undefined): boolean {
    return proto3.util.equals(ClientPlayerAddItem_Spells, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Wands
 */
export class ClientPlayerAddItem_Wands extends Message<ClientPlayerAddItem_Wands> {
  /**
   * @generated from field: repeated NTALT.Wand list = 1;
   */
  list: Wand[] = [];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Wands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Wands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Wand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Wands {
    return new ClientPlayerAddItem_Wands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Wands {
    return new ClientPlayerAddItem_Wands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Wands {
    return new ClientPlayerAddItem_Wands().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerAddItem_Wands | PlainMessage<ClientPlayerAddItem_Wands> | undefined, b: ClientPlayerAddItem_Wands | PlainMessage<ClientPlayerAddItem_Wands> | undefined): boolean {
    return proto3.util.equals(ClientPlayerAddItem_Wands, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Items
 */
export class ClientPlayerAddItem_Items extends Message<ClientPlayerAddItem_Items> {
  /**
   * @generated from field: repeated NTALT.Item list = 1;
   */
  list: Item[] = [];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Items>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Items";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Items {
    return new ClientPlayerAddItem_Items().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Items {
    return new ClientPlayerAddItem_Items().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Items {
    return new ClientPlayerAddItem_Items().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerAddItem_Items | PlainMessage<ClientPlayerAddItem_Items> | undefined, b: ClientPlayerAddItem_Items | PlainMessage<ClientPlayerAddItem_Items> | undefined): boolean {
    return proto3.util.equals(ClientPlayerAddItem_Items, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerAddItem.Entities
 */
export class ClientPlayerAddItem_Entities extends Message<ClientPlayerAddItem_Entities> {
  /**
   * @generated from field: repeated NTALT.EntityItem list = 1;
   */
  list: EntityItem[] = [];

  constructor(data?: PartialMessage<ClientPlayerAddItem_Entities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerAddItem.Entities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: EntityItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerAddItem_Entities {
    return new ClientPlayerAddItem_Entities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Entities {
    return new ClientPlayerAddItem_Entities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerAddItem_Entities {
    return new ClientPlayerAddItem_Entities().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerAddItem_Entities | PlainMessage<ClientPlayerAddItem_Entities> | undefined, b: ClientPlayerAddItem_Entities | PlainMessage<ClientPlayerAddItem_Entities> | undefined): boolean {
    return proto3.util.equals(ClientPlayerAddItem_Entities, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerAddItem
 */
export class ServerPlayerAddItem extends Message<ServerPlayerAddItem> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from oneof NTALT.ServerPlayerAddItem.item
   */
  item: {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Spells spells = 2;
     */
    value: ServerPlayerAddItem_Spells;
    case: "spells";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Wands wands = 3;
     */
    value: ServerPlayerAddItem_Wands;
    case: "wands";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Items flasks = 4;
     */
    value: ServerPlayerAddItem_Items;
    case: "flasks";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerAddItem.Entities objects = 5;
     */
    value: ServerPlayerAddItem_Entities;
    case: "objects";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerPlayerAddItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "spells", kind: "message", T: ServerPlayerAddItem_Spells, oneof: "item" },
    { no: 3, name: "wands", kind: "message", T: ServerPlayerAddItem_Wands, oneof: "item" },
    { no: 4, name: "flasks", kind: "message", T: ServerPlayerAddItem_Items, oneof: "item" },
    { no: 5, name: "objects", kind: "message", T: ServerPlayerAddItem_Entities, oneof: "item" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem {
    return new ServerPlayerAddItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem {
    return new ServerPlayerAddItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem {
    return new ServerPlayerAddItem().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerAddItem | PlainMessage<ServerPlayerAddItem> | undefined, b: ServerPlayerAddItem | PlainMessage<ServerPlayerAddItem> | undefined): boolean {
    return proto3.util.equals(ServerPlayerAddItem, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Spells
 */
export class ServerPlayerAddItem_Spells extends Message<ServerPlayerAddItem_Spells> {
  /**
   * @generated from field: repeated NTALT.Spell list = 1;
   */
  list: Spell[] = [];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Spells>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Spells";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Spell, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Spells {
    return new ServerPlayerAddItem_Spells().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Spells {
    return new ServerPlayerAddItem_Spells().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Spells {
    return new ServerPlayerAddItem_Spells().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerAddItem_Spells | PlainMessage<ServerPlayerAddItem_Spells> | undefined, b: ServerPlayerAddItem_Spells | PlainMessage<ServerPlayerAddItem_Spells> | undefined): boolean {
    return proto3.util.equals(ServerPlayerAddItem_Spells, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Wands
 */
export class ServerPlayerAddItem_Wands extends Message<ServerPlayerAddItem_Wands> {
  /**
   * @generated from field: repeated NTALT.Wand list = 2;
   */
  list: Wand[] = [];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Wands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Wands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "list", kind: "message", T: Wand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Wands {
    return new ServerPlayerAddItem_Wands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Wands {
    return new ServerPlayerAddItem_Wands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Wands {
    return new ServerPlayerAddItem_Wands().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerAddItem_Wands | PlainMessage<ServerPlayerAddItem_Wands> | undefined, b: ServerPlayerAddItem_Wands | PlainMessage<ServerPlayerAddItem_Wands> | undefined): boolean {
    return proto3.util.equals(ServerPlayerAddItem_Wands, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Items
 */
export class ServerPlayerAddItem_Items extends Message<ServerPlayerAddItem_Items> {
  /**
   * @generated from field: repeated NTALT.Item list = 3;
   */
  list: Item[] = [];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Items>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Items";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "list", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Items {
    return new ServerPlayerAddItem_Items().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Items {
    return new ServerPlayerAddItem_Items().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Items {
    return new ServerPlayerAddItem_Items().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerAddItem_Items | PlainMessage<ServerPlayerAddItem_Items> | undefined, b: ServerPlayerAddItem_Items | PlainMessage<ServerPlayerAddItem_Items> | undefined): boolean {
    return proto3.util.equals(ServerPlayerAddItem_Items, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerAddItem.Entities
 */
export class ServerPlayerAddItem_Entities extends Message<ServerPlayerAddItem_Entities> {
  /**
   * @generated from field: repeated NTALT.EntityItem list = 4;
   */
  list: EntityItem[] = [];

  constructor(data?: PartialMessage<ServerPlayerAddItem_Entities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerAddItem.Entities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "list", kind: "message", T: EntityItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerAddItem_Entities {
    return new ServerPlayerAddItem_Entities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Entities {
    return new ServerPlayerAddItem_Entities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerAddItem_Entities {
    return new ServerPlayerAddItem_Entities().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerAddItem_Entities | PlainMessage<ServerPlayerAddItem_Entities> | undefined, b: ServerPlayerAddItem_Entities | PlainMessage<ServerPlayerAddItem_Entities> | undefined): boolean {
    return proto3.util.equals(ServerPlayerAddItem_Entities, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerTakeItem
 */
export class ClientPlayerTakeItem extends Message<ClientPlayerTakeItem> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ClientPlayerTakeItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerTakeItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerTakeItem {
    return new ClientPlayerTakeItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerTakeItem {
    return new ClientPlayerTakeItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerTakeItem {
    return new ClientPlayerTakeItem().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerTakeItem | PlainMessage<ClientPlayerTakeItem> | undefined, b: ClientPlayerTakeItem | PlainMessage<ClientPlayerTakeItem> | undefined): boolean {
    return proto3.util.equals(ClientPlayerTakeItem, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerTakeItem
 */
export class ServerPlayerTakeItem extends Message<ServerPlayerTakeItem> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<ServerPlayerTakeItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerTakeItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerTakeItem {
    return new ServerPlayerTakeItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerTakeItem {
    return new ServerPlayerTakeItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerTakeItem {
    return new ServerPlayerTakeItem().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerTakeItem | PlainMessage<ServerPlayerTakeItem> | undefined, b: ServerPlayerTakeItem | PlainMessage<ServerPlayerTakeItem> | undefined): boolean {
    return proto3.util.equals(ServerPlayerTakeItem, a, b);
  }
}

/**
 * @generated from message NTALT.ClientChat
 */
export class ClientChat extends Message<ClientChat> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ClientChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientChat {
    return new ClientChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientChat {
    return new ClientChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientChat {
    return new ClientChat().fromJsonString(jsonString, options);
  }

  static equals(a: ClientChat | PlainMessage<ClientChat> | undefined, b: ClientChat | PlainMessage<ClientChat> | undefined): boolean {
    return proto3.util.equals(ClientChat, a, b);
  }
}

/**
 * @generated from message NTALT.ServerChat
 */
export class ServerChat extends Message<ServerChat> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<ServerChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerChat {
    return new ServerChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerChat {
    return new ServerChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerChat {
    return new ServerChat().fromJsonString(jsonString, options);
  }

  static equals(a: ServerChat | PlainMessage<ServerChat> | undefined, b: ServerChat | PlainMessage<ServerChat> | undefined): boolean {
    return proto3.util.equals(ServerChat, a, b);
  }
}

/**
 * @generated from message NTALT.ServerStatsUpdate
 */
export class ServerStatsUpdate extends Message<ServerStatsUpdate> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<ServerStatsUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerStatsUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerStatsUpdate {
    return new ServerStatsUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerStatsUpdate {
    return new ServerStatsUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerStatsUpdate {
    return new ServerStatsUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ServerStatsUpdate | PlainMessage<ServerStatsUpdate> | undefined, b: ServerStatsUpdate | PlainMessage<ServerStatsUpdate> | undefined): boolean {
    return proto3.util.equals(ServerStatsUpdate, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerPickup
 */
export class ClientPlayerPickup extends Message<ClientPlayerPickup> {
  /**
   * @generated from oneof NTALT.ClientPlayerPickup.kind
   */
  kind: {
    /**
     * @generated from field: NTALT.ClientPlayerPickup.HeartPickup heart = 1;
     */
    value: ClientPlayerPickup_HeartPickup;
    case: "heart";
  } | {
    /**
     * @generated from field: NTALT.ClientPlayerPickup.OrbPickup orb = 2;
     */
    value: ClientPlayerPickup_OrbPickup;
    case: "orb";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClientPlayerPickup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerPickup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heart", kind: "message", T: ClientPlayerPickup_HeartPickup, oneof: "kind" },
    { no: 2, name: "orb", kind: "message", T: ClientPlayerPickup_OrbPickup, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerPickup {
    return new ClientPlayerPickup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerPickup {
    return new ClientPlayerPickup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerPickup {
    return new ClientPlayerPickup().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerPickup | PlainMessage<ClientPlayerPickup> | undefined, b: ClientPlayerPickup | PlainMessage<ClientPlayerPickup> | undefined): boolean {
    return proto3.util.equals(ClientPlayerPickup, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerPickup.HeartPickup
 */
export class ClientPlayerPickup_HeartPickup extends Message<ClientPlayerPickup_HeartPickup> {
  /**
   * @generated from field: bool hp_perk = 1;
   */
  hpPerk = false;

  constructor(data?: PartialMessage<ClientPlayerPickup_HeartPickup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerPickup.HeartPickup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hp_perk", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerPickup_HeartPickup {
    return new ClientPlayerPickup_HeartPickup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerPickup_HeartPickup {
    return new ClientPlayerPickup_HeartPickup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerPickup_HeartPickup {
    return new ClientPlayerPickup_HeartPickup().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerPickup_HeartPickup | PlainMessage<ClientPlayerPickup_HeartPickup> | undefined, b: ClientPlayerPickup_HeartPickup | PlainMessage<ClientPlayerPickup_HeartPickup> | undefined): boolean {
    return proto3.util.equals(ClientPlayerPickup_HeartPickup, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerPickup.OrbPickup
 */
export class ClientPlayerPickup_OrbPickup extends Message<ClientPlayerPickup_OrbPickup> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<ClientPlayerPickup_OrbPickup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerPickup.OrbPickup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerPickup_OrbPickup {
    return new ClientPlayerPickup_OrbPickup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerPickup_OrbPickup {
    return new ClientPlayerPickup_OrbPickup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerPickup_OrbPickup {
    return new ClientPlayerPickup_OrbPickup().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerPickup_OrbPickup | PlainMessage<ClientPlayerPickup_OrbPickup> | undefined, b: ClientPlayerPickup_OrbPickup | PlainMessage<ClientPlayerPickup_OrbPickup> | undefined): boolean {
    return proto3.util.equals(ClientPlayerPickup_OrbPickup, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerPickup
 */
export class ServerPlayerPickup extends Message<ServerPlayerPickup> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from oneof NTALT.ServerPlayerPickup.kind
   */
  kind: {
    /**
     * @generated from field: NTALT.ServerPlayerPickup.HeartPickup heart = 2;
     */
    value: ServerPlayerPickup_HeartPickup;
    case: "heart";
  } | {
    /**
     * @generated from field: NTALT.ServerPlayerPickup.OrbPickup orb = 3;
     */
    value: ServerPlayerPickup_OrbPickup;
    case: "orb";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerPlayerPickup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerPickup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "heart", kind: "message", T: ServerPlayerPickup_HeartPickup, oneof: "kind" },
    { no: 3, name: "orb", kind: "message", T: ServerPlayerPickup_OrbPickup, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerPickup {
    return new ServerPlayerPickup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerPickup {
    return new ServerPlayerPickup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerPickup {
    return new ServerPlayerPickup().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerPickup | PlainMessage<ServerPlayerPickup> | undefined, b: ServerPlayerPickup | PlainMessage<ServerPlayerPickup> | undefined): boolean {
    return proto3.util.equals(ServerPlayerPickup, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerPickup.HeartPickup
 */
export class ServerPlayerPickup_HeartPickup extends Message<ServerPlayerPickup_HeartPickup> {
  /**
   * @generated from field: bool hp_perk = 1;
   */
  hpPerk = false;

  constructor(data?: PartialMessage<ServerPlayerPickup_HeartPickup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerPickup.HeartPickup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hp_perk", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerPickup_HeartPickup {
    return new ServerPlayerPickup_HeartPickup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerPickup_HeartPickup {
    return new ServerPlayerPickup_HeartPickup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerPickup_HeartPickup {
    return new ServerPlayerPickup_HeartPickup().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerPickup_HeartPickup | PlainMessage<ServerPlayerPickup_HeartPickup> | undefined, b: ServerPlayerPickup_HeartPickup | PlainMessage<ServerPlayerPickup_HeartPickup> | undefined): boolean {
    return proto3.util.equals(ServerPlayerPickup_HeartPickup, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerPickup.OrbPickup
 */
export class ServerPlayerPickup_OrbPickup extends Message<ServerPlayerPickup_OrbPickup> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<ServerPlayerPickup_OrbPickup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerPickup.OrbPickup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerPickup_OrbPickup {
    return new ServerPlayerPickup_OrbPickup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerPickup_OrbPickup {
    return new ServerPlayerPickup_OrbPickup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerPickup_OrbPickup {
    return new ServerPlayerPickup_OrbPickup().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerPickup_OrbPickup | PlainMessage<ServerPlayerPickup_OrbPickup> | undefined, b: ServerPlayerPickup_OrbPickup | PlainMessage<ServerPlayerPickup_OrbPickup> | undefined): boolean {
    return proto3.util.equals(ServerPlayerPickup_OrbPickup, a, b);
  }
}

/**
 * @generated from message NTALT.ClientNemesisPickupItem
 */
export class ClientNemesisPickupItem extends Message<ClientNemesisPickupItem> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<ClientNemesisPickupItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientNemesisPickupItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientNemesisPickupItem {
    return new ClientNemesisPickupItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientNemesisPickupItem {
    return new ClientNemesisPickupItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientNemesisPickupItem {
    return new ClientNemesisPickupItem().fromJsonString(jsonString, options);
  }

  static equals(a: ClientNemesisPickupItem | PlainMessage<ClientNemesisPickupItem> | undefined, b: ClientNemesisPickupItem | PlainMessage<ClientNemesisPickupItem> | undefined): boolean {
    return proto3.util.equals(ClientNemesisPickupItem, a, b);
  }
}

/**
 * @generated from message NTALT.ServerNemesisPickupItem
 */
export class ServerNemesisPickupItem extends Message<ServerNemesisPickupItem> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string game_id = 2;
   */
  gameId = "";

  constructor(data?: PartialMessage<ServerNemesisPickupItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerNemesisPickupItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerNemesisPickupItem {
    return new ServerNemesisPickupItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerNemesisPickupItem {
    return new ServerNemesisPickupItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerNemesisPickupItem {
    return new ServerNemesisPickupItem().fromJsonString(jsonString, options);
  }

  static equals(a: ServerNemesisPickupItem | PlainMessage<ServerNemesisPickupItem> | undefined, b: ServerNemesisPickupItem | PlainMessage<ServerNemesisPickupItem> | undefined): boolean {
    return proto3.util.equals(ServerNemesisPickupItem, a, b);
  }
}

/**
 * @generated from message NTALT.ClientNemesisAbility
 */
export class ClientNemesisAbility extends Message<ClientNemesisAbility> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<ClientNemesisAbility>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientNemesisAbility";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientNemesisAbility {
    return new ClientNemesisAbility().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientNemesisAbility {
    return new ClientNemesisAbility().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientNemesisAbility {
    return new ClientNemesisAbility().fromJsonString(jsonString, options);
  }

  static equals(a: ClientNemesisAbility | PlainMessage<ClientNemesisAbility> | undefined, b: ClientNemesisAbility | PlainMessage<ClientNemesisAbility> | undefined): boolean {
    return proto3.util.equals(ClientNemesisAbility, a, b);
  }
}

/**
 * @generated from message NTALT.ServerNemesisAbility
 */
export class ServerNemesisAbility extends Message<ServerNemesisAbility> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string game_id = 2;
   */
  gameId = "";

  constructor(data?: PartialMessage<ServerNemesisAbility>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerNemesisAbility";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerNemesisAbility {
    return new ServerNemesisAbility().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerNemesisAbility {
    return new ServerNemesisAbility().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerNemesisAbility {
    return new ServerNemesisAbility().fromJsonString(jsonString, options);
  }

  static equals(a: ServerNemesisAbility | PlainMessage<ServerNemesisAbility> | undefined, b: ServerNemesisAbility | PlainMessage<ServerNemesisAbility> | undefined): boolean {
    return proto3.util.equals(ServerNemesisAbility, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerDeath
 */
export class ClientPlayerDeath extends Message<ClientPlayerDeath> {
  /**
   * @generated from field: bool is_win = 1;
   */
  isWin = false;

  /**
   * @generated from field: optional uint32 game_time = 2;
   */
  gameTime?: number;

  constructor(data?: PartialMessage<ClientPlayerDeath>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerDeath";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_win", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "game_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerDeath {
    return new ClientPlayerDeath().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerDeath {
    return new ClientPlayerDeath().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerDeath {
    return new ClientPlayerDeath().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerDeath | PlainMessage<ClientPlayerDeath> | undefined, b: ClientPlayerDeath | PlainMessage<ClientPlayerDeath> | undefined): boolean {
    return proto3.util.equals(ClientPlayerDeath, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerDeath
 */
export class ServerPlayerDeath extends Message<ServerPlayerDeath> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: bool is_win = 2;
   */
  isWin = false;

  /**
   * @generated from field: optional uint32 game_time = 3;
   */
  gameTime?: number;

  constructor(data?: PartialMessage<ServerPlayerDeath>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerDeath";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_win", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "game_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerDeath {
    return new ServerPlayerDeath().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerDeath {
    return new ServerPlayerDeath().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerDeath {
    return new ServerPlayerDeath().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerDeath | PlainMessage<ServerPlayerDeath> | undefined, b: ServerPlayerDeath | PlainMessage<ServerPlayerDeath> | undefined): boolean {
    return proto3.util.equals(ServerPlayerDeath, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerNewGamePlus
 */
export class ClientPlayerNewGamePlus extends Message<ClientPlayerNewGamePlus> {
  /**
   * @generated from field: uint32 amount = 1;
   */
  amount = 0;

  constructor(data?: PartialMessage<ClientPlayerNewGamePlus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerNewGamePlus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerNewGamePlus {
    return new ClientPlayerNewGamePlus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerNewGamePlus {
    return new ClientPlayerNewGamePlus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerNewGamePlus {
    return new ClientPlayerNewGamePlus().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerNewGamePlus | PlainMessage<ClientPlayerNewGamePlus> | undefined, b: ClientPlayerNewGamePlus | PlainMessage<ClientPlayerNewGamePlus> | undefined): boolean {
    return proto3.util.equals(ClientPlayerNewGamePlus, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerNewGamePlus
 */
export class ServerPlayerNewGamePlus extends Message<ServerPlayerNewGamePlus> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount = 0;

  constructor(data?: PartialMessage<ServerPlayerNewGamePlus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerNewGamePlus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerNewGamePlus {
    return new ServerPlayerNewGamePlus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerNewGamePlus {
    return new ServerPlayerNewGamePlus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerNewGamePlus {
    return new ServerPlayerNewGamePlus().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerNewGamePlus | PlainMessage<ServerPlayerNewGamePlus> | undefined, b: ServerPlayerNewGamePlus | PlainMessage<ServerPlayerNewGamePlus> | undefined): boolean {
    return proto3.util.equals(ServerPlayerNewGamePlus, a, b);
  }
}

/**
 * @generated from message NTALT.ClientPlayerSecretHourglass
 */
export class ClientPlayerSecretHourglass extends Message<ClientPlayerSecretHourglass> {
  /**
   * @generated from field: string material = 1;
   */
  material = "";

  constructor(data?: PartialMessage<ClientPlayerSecretHourglass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientPlayerSecretHourglass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "material", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientPlayerSecretHourglass {
    return new ClientPlayerSecretHourglass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientPlayerSecretHourglass {
    return new ClientPlayerSecretHourglass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientPlayerSecretHourglass {
    return new ClientPlayerSecretHourglass().fromJsonString(jsonString, options);
  }

  static equals(a: ClientPlayerSecretHourglass | PlainMessage<ClientPlayerSecretHourglass> | undefined, b: ClientPlayerSecretHourglass | PlainMessage<ClientPlayerSecretHourglass> | undefined): boolean {
    return proto3.util.equals(ClientPlayerSecretHourglass, a, b);
  }
}

/**
 * @generated from message NTALT.ServerPlayerSecretHourglass
 */
export class ServerPlayerSecretHourglass extends Message<ServerPlayerSecretHourglass> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string material = 2;
   */
  material = "";

  constructor(data?: PartialMessage<ServerPlayerSecretHourglass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerPlayerSecretHourglass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "material", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerPlayerSecretHourglass {
    return new ServerPlayerSecretHourglass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerPlayerSecretHourglass {
    return new ServerPlayerSecretHourglass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerPlayerSecretHourglass {
    return new ServerPlayerSecretHourglass().fromJsonString(jsonString, options);
  }

  static equals(a: ServerPlayerSecretHourglass | PlainMessage<ServerPlayerSecretHourglass> | undefined, b: ServerPlayerSecretHourglass | PlainMessage<ServerPlayerSecretHourglass> | undefined): boolean {
    return proto3.util.equals(ServerPlayerSecretHourglass, a, b);
  }
}

/**
 * @generated from message NTALT.ClientCustomModEvent
 */
export class ClientCustomModEvent extends Message<ClientCustomModEvent> {
  /**
   * @generated from field: string payload = 1;
   */
  payload = "";

  constructor(data?: PartialMessage<ClientCustomModEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientCustomModEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientCustomModEvent {
    return new ClientCustomModEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientCustomModEvent {
    return new ClientCustomModEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientCustomModEvent {
    return new ClientCustomModEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ClientCustomModEvent | PlainMessage<ClientCustomModEvent> | undefined, b: ClientCustomModEvent | PlainMessage<ClientCustomModEvent> | undefined): boolean {
    return proto3.util.equals(ClientCustomModEvent, a, b);
  }
}

/**
 * @generated from message NTALT.ServerCustomModEvent
 */
export class ServerCustomModEvent extends Message<ServerCustomModEvent> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string payload = 2;
   */
  payload = "";

  constructor(data?: PartialMessage<ServerCustomModEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerCustomModEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerCustomModEvent {
    return new ServerCustomModEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerCustomModEvent {
    return new ServerCustomModEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerCustomModEvent {
    return new ServerCustomModEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ServerCustomModEvent | PlainMessage<ServerCustomModEvent> | undefined, b: ServerCustomModEvent | PlainMessage<ServerCustomModEvent> | undefined): boolean {
    return proto3.util.equals(ServerCustomModEvent, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRespawnPenalty
 */
export class ClientRespawnPenalty extends Message<ClientRespawnPenalty> {
  /**
   * @generated from field: uint32 deaths = 1;
   */
  deaths = 0;

  constructor(data?: PartialMessage<ClientRespawnPenalty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRespawnPenalty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deaths", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRespawnPenalty {
    return new ClientRespawnPenalty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRespawnPenalty {
    return new ClientRespawnPenalty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRespawnPenalty {
    return new ClientRespawnPenalty().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRespawnPenalty | PlainMessage<ClientRespawnPenalty> | undefined, b: ClientRespawnPenalty | PlainMessage<ClientRespawnPenalty> | undefined): boolean {
    return proto3.util.equals(ClientRespawnPenalty, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRespawnPenalty
 */
export class ServerRespawnPenalty extends Message<ServerRespawnPenalty> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 deaths = 2;
   */
  deaths = 0;

  constructor(data?: PartialMessage<ServerRespawnPenalty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRespawnPenalty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deaths", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRespawnPenalty {
    return new ServerRespawnPenalty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRespawnPenalty {
    return new ServerRespawnPenalty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRespawnPenalty {
    return new ServerRespawnPenalty().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRespawnPenalty | PlainMessage<ServerRespawnPenalty> | undefined, b: ServerRespawnPenalty | PlainMessage<ServerRespawnPenalty> | undefined): boolean {
    return proto3.util.equals(ServerRespawnPenalty, a, b);
  }
}

/**
 * @generated from message NTALT.ClientAngerySteve
 */
export class ClientAngerySteve extends Message<ClientAngerySteve> {
  /**
   * @generated from field: bool idk = 1;
   */
  idk = false;

  constructor(data?: PartialMessage<ClientAngerySteve>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientAngerySteve";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idk", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientAngerySteve {
    return new ClientAngerySteve().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientAngerySteve {
    return new ClientAngerySteve().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientAngerySteve {
    return new ClientAngerySteve().fromJsonString(jsonString, options);
  }

  static equals(a: ClientAngerySteve | PlainMessage<ClientAngerySteve> | undefined, b: ClientAngerySteve | PlainMessage<ClientAngerySteve> | undefined): boolean {
    return proto3.util.equals(ClientAngerySteve, a, b);
  }
}

/**
 * @generated from message NTALT.ServerAngerySteve
 */
export class ServerAngerySteve extends Message<ServerAngerySteve> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ServerAngerySteve>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerAngerySteve";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerAngerySteve {
    return new ServerAngerySteve().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerAngerySteve {
    return new ServerAngerySteve().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerAngerySteve {
    return new ServerAngerySteve().fromJsonString(jsonString, options);
  }

  static equals(a: ServerAngerySteve | PlainMessage<ServerAngerySteve> | undefined, b: ServerAngerySteve | PlainMessage<ServerAngerySteve> | undefined): boolean {
    return proto3.util.equals(ServerAngerySteve, a, b);
  }
}

/**
 * @generated from message NTALT.Wand
 */
export class Wand extends Message<Wand> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: NTALT.Wand.WandStats stats = 2;
   */
  stats?: Wand_WandStats;

  /**
   * @generated from field: repeated NTALT.Spell always_cast = 3;
   */
  alwaysCast: Spell[] = [];

  /**
   * @generated from field: repeated NTALT.Spell deck = 4;
   */
  deck: Spell[] = [];

  /**
   * @generated from field: optional string sent_by = 5;
   */
  sentBy?: string;

  /**
   * @generated from field: optional string contributed_by = 6;
   */
  contributedBy?: string;

  constructor(data?: PartialMessage<Wand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Wand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stats", kind: "message", T: Wand_WandStats },
    { no: 3, name: "always_cast", kind: "message", T: Spell, repeated: true },
    { no: 4, name: "deck", kind: "message", T: Spell, repeated: true },
    { no: 5, name: "sent_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "contributed_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Wand {
    return new Wand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Wand {
    return new Wand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Wand {
    return new Wand().fromJsonString(jsonString, options);
  }

  static equals(a: Wand | PlainMessage<Wand> | undefined, b: Wand | PlainMessage<Wand> | undefined): boolean {
    return proto3.util.equals(Wand, a, b);
  }
}

/**
 * @generated from message NTALT.Wand.WandStats
 */
export class Wand_WandStats extends Message<Wand_WandStats> {
  /**
   * @generated from field: string sprite = 1;
   */
  sprite = "";

  /**
   * @generated from field: bool named = 2;
   */
  named = false;

  /**
   * @generated from field: string ui_name = 3;
   */
  uiName = "";

  /**
   * @generated from field: float mana_max = 4;
   */
  manaMax = 0;

  /**
   * @generated from field: float mana_charge_speed = 5;
   */
  manaChargeSpeed = 0;

  /**
   * @generated from field: int32 reload_time = 6;
   */
  reloadTime = 0;

  /**
   * @generated from field: uint32 actions_per_round = 7;
   */
  actionsPerRound = 0;

  /**
   * @generated from field: uint32 deck_capacity = 8;
   */
  deckCapacity = 0;

  /**
   * @generated from field: bool shuffle_deck_when_empty = 9;
   */
  shuffleDeckWhenEmpty = false;

  /**
   * @generated from field: float spread_degrees = 10;
   */
  spreadDegrees = 0;

  /**
   * @generated from field: float speed_multiplier = 11;
   */
  speedMultiplier = 0;

  /**
   * @generated from field: int32 fire_rate_wait = 12;
   */
  fireRateWait = 0;

  /**
   * @generated from field: float tip_x = 13;
   */
  tipX = 0;

  /**
   * @generated from field: float tip_y = 14;
   */
  tipY = 0;

  /**
   * @generated from field: float grip_x = 15;
   */
  gripX = 0;

  /**
   * @generated from field: float grip_y = 16;
   */
  gripY = 0;

  constructor(data?: PartialMessage<Wand_WandStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Wand.WandStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sprite", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "named", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "ui_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mana_max", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "mana_charge_speed", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "reload_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "actions_per_round", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "deck_capacity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "shuffle_deck_when_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "spread_degrees", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "speed_multiplier", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 12, name: "fire_rate_wait", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "tip_x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 14, name: "tip_y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 15, name: "grip_x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 16, name: "grip_y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Wand_WandStats {
    return new Wand_WandStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Wand_WandStats {
    return new Wand_WandStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Wand_WandStats {
    return new Wand_WandStats().fromJsonString(jsonString, options);
  }

  static equals(a: Wand_WandStats | PlainMessage<Wand_WandStats> | undefined, b: Wand_WandStats | PlainMessage<Wand_WandStats> | undefined): boolean {
    return proto3.util.equals(Wand_WandStats, a, b);
  }
}

/**
 * @generated from message NTALT.Spell
 */
export class Spell extends Message<Spell> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string game_id = 2;
   */
  gameId = "";

  /**
   * @generated from field: optional string sent_by = 3;
   */
  sentBy?: string;

  /**
   * @generated from field: optional string contributed_by = 4;
   */
  contributedBy?: string;

  /**
   * @generated from field: int32 uses_remaining = 5;
   */
  usesRemaining = 0;

  constructor(data?: PartialMessage<Spell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Spell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sent_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "contributed_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "uses_remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spell {
    return new Spell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spell {
    return new Spell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spell {
    return new Spell().fromJsonString(jsonString, options);
  }

  static equals(a: Spell | PlainMessage<Spell> | undefined, b: Spell | PlainMessage<Spell> | undefined): boolean {
    return proto3.util.equals(Spell, a, b);
  }
}

/**
 * @generated from message NTALT.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: NTALT.Item.Color color = 2;
   */
  color?: Item_Color;

  /**
   * @generated from field: repeated NTALT.Item.Material content = 3;
   */
  content: Item_Material[] = [];

  /**
   * @generated from field: optional string sent_by = 4;
   */
  sentBy?: string;

  /**
   * @generated from field: optional string contributed_by = 5;
   */
  contributedBy?: string;

  /**
   * @generated from field: bool is_chest = 6 [deprecated = true];
   * @deprecated
   */
  isChest = false;

  /**
   * @generated from field: string item_type = 7;
   */
  itemType = "";

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "color", kind: "message", T: Item_Color },
    { no: 3, name: "content", kind: "message", T: Item_Material, repeated: true },
    { no: 4, name: "sent_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "contributed_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "is_chest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "item_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message NTALT.Item.Color
 */
export class Item_Color extends Message<Item_Color> {
  /**
   * @generated from field: float r = 1;
   */
  r = 0;

  /**
   * @generated from field: float g = 2;
   */
  g = 0;

  /**
   * @generated from field: float b = 3;
   */
  b = 0;

  constructor(data?: PartialMessage<Item_Color>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Item.Color";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "r", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "g", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "b", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item_Color {
    return new Item_Color().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item_Color {
    return new Item_Color().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item_Color {
    return new Item_Color().fromJsonString(jsonString, options);
  }

  static equals(a: Item_Color | PlainMessage<Item_Color> | undefined, b: Item_Color | PlainMessage<Item_Color> | undefined): boolean {
    return proto3.util.equals(Item_Color, a, b);
  }
}

/**
 * @generated from message NTALT.Item.Material
 */
export class Item_Material extends Message<Item_Material> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: uint32 amount = 2;
   */
  amount = 0;

  constructor(data?: PartialMessage<Item_Material>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.Item.Material";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "amount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item_Material {
    return new Item_Material().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item_Material {
    return new Item_Material().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item_Material {
    return new Item_Material().fromJsonString(jsonString, options);
  }

  static equals(a: Item_Material | PlainMessage<Item_Material> | undefined, b: Item_Material | PlainMessage<Item_Material> | undefined): boolean {
    return proto3.util.equals(Item_Material, a, b);
  }
}

/**
 * @generated from message NTALT.EntityItem
 */
export class EntityItem extends Message<EntityItem> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string sprite = 3;
   */
  sprite = "";

  /**
   * @generated from field: optional string sent_by = 4;
   */
  sentBy?: string;

  constructor(data?: PartialMessage<EntityItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.EntityItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sprite", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sent_by", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityItem {
    return new EntityItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityItem {
    return new EntityItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityItem {
    return new EntityItem().fromJsonString(jsonString, options);
  }

  static equals(a: EntityItem | PlainMessage<EntityItem> | undefined, b: EntityItem | PlainMessage<EntityItem> | undefined): boolean {
    return proto3.util.equals(EntityItem, a, b);
  }
}

/**
 * @generated from message NTALT.LobbyAction
 */
export class LobbyAction extends Message<LobbyAction> {
  /**
   * @generated from oneof NTALT.LobbyAction.action
   */
  action: {
    /**
     * @generated from field: NTALT.ClientRoomCreate c_room_create = 1;
     */
    value: ClientRoomCreate;
    case: "cRoomCreate";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomCreated s_room_created = 2;
     */
    value: ServerRoomCreated;
    case: "sRoomCreated";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomCreateFailed s_room_create_failed = 3;
     */
    value: ServerRoomCreateFailed;
    case: "sRoomCreateFailed";
  } | {
    /**
     * @generated from field: NTALT.ClientRoomUpdate c_room_update = 4;
     */
    value: ClientRoomUpdate;
    case: "cRoomUpdate";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomUpdated s_room_updated = 5;
     */
    value: ServerRoomUpdated;
    case: "sRoomUpdated";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomUpdateFailed s_room_update_failed = 6;
     */
    value: ServerRoomUpdateFailed;
    case: "sRoomUpdateFailed";
  } | {
    /**
     * @generated from field: NTALT.ClientRoomFlagsUpdate c_room_flags_update = 7;
     */
    value: ClientRoomFlagsUpdate;
    case: "cRoomFlagsUpdate";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomFlagsUpdated s_room_flags_updated = 8;
     */
    value: ServerRoomFlagsUpdated;
    case: "sRoomFlagsUpdated";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomFlagsUpdateFailed s_room_flags_update_failed = 9;
     */
    value: ServerRoomFlagsUpdateFailed;
    case: "sRoomFlagsUpdateFailed";
  } | {
    /**
     * @generated from field: NTALT.ClientRoomDelete c_room_delete = 10;
     */
    value: ClientRoomDelete;
    case: "cRoomDelete";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomDeleted s_room_deleted = 11;
     */
    value: ServerRoomDeleted;
    case: "sRoomDeleted";
  } | {
    /**
     * @generated from field: NTALT.ClientJoinRoom c_join_room = 12;
     */
    value: ClientJoinRoom;
    case: "cJoinRoom";
  } | {
    /**
     * @generated from field: NTALT.ServerJoinRoomSuccess s_join_room_success = 13;
     */
    value: ServerJoinRoomSuccess;
    case: "sJoinRoomSuccess";
  } | {
    /**
     * @generated from field: NTALT.ServerJoinRoomFailed s_join_room_failed = 14;
     */
    value: ServerJoinRoomFailed;
    case: "sJoinRoomFailed";
  } | {
    /**
     * @generated from field: NTALT.ServerUserJoinedRoom s_user_joined_room = 15;
     */
    value: ServerUserJoinedRoom;
    case: "sUserJoinedRoom";
  } | {
    /**
     * @generated from field: NTALT.ClientLeaveRoom c_leave_room = 16;
     */
    value: ClientLeaveRoom;
    case: "cLeaveRoom";
  } | {
    /**
     * @generated from field: NTALT.ServerUserLeftRoom s_user_left_room = 17;
     */
    value: ServerUserLeftRoom;
    case: "sUserLeftRoom";
  } | {
    /**
     * @generated from field: NTALT.ClientKickUser c_kick_user = 18;
     */
    value: ClientKickUser;
    case: "cKickUser";
  } | {
    /**
     * @generated from field: NTALT.ServerUserKicked s_user_kicked = 19;
     */
    value: ServerUserKicked;
    case: "sUserKicked";
  } | {
    /**
     * @generated from field: NTALT.ClientBanUser c_ban_user = 20;
     */
    value: ClientBanUser;
    case: "cBanUser";
  } | {
    /**
     * @generated from field: NTALT.ServerUserBanned s_user_banned = 21;
     */
    value: ServerUserBanned;
    case: "sUserBanned";
  } | {
    /**
     * @generated from field: NTALT.ClientReadyState c_ready_state = 22;
     */
    value: ClientReadyState;
    case: "cReadyState";
  } | {
    /**
     * @generated from field: NTALT.ServerUserReadyState s_user_ready_state = 23;
     */
    value: ServerUserReadyState;
    case: "sUserReadyState";
  } | {
    /**
     * @generated from field: NTALT.ClientStartRun c_start_run = 24;
     */
    value: ClientStartRun;
    case: "cStartRun";
  } | {
    /**
     * @generated from field: NTALT.ServerHostStart s_host_start = 25;
     */
    value: ServerHostStart;
    case: "sHostStart";
  } | {
    /**
     * @generated from field: NTALT.ClientRequestRoomList c_request_room_list = 27;
     */
    value: ClientRequestRoomList;
    case: "cRequestRoomList";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomList s_room_list = 28;
     */
    value: ServerRoomList;
    case: "sRoomList";
  } | {
    /**
     * @generated from field: NTALT.ServerDisconnected s_disconnected = 31;
     */
    value: ServerDisconnected;
    case: "sDisconnected";
  } | {
    /**
     * @generated from field: NTALT.ServerRoomAddToList s_room_add_to_list = 32;
     */
    value: ServerRoomAddToList;
    case: "sRoomAddToList";
  } | {
    /**
     * @generated from field: NTALT.ClientRunOver c_run_over = 33;
     */
    value: ClientRunOver;
    case: "cRunOver";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LobbyAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.LobbyAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "c_room_create", kind: "message", T: ClientRoomCreate, oneof: "action" },
    { no: 2, name: "s_room_created", kind: "message", T: ServerRoomCreated, oneof: "action" },
    { no: 3, name: "s_room_create_failed", kind: "message", T: ServerRoomCreateFailed, oneof: "action" },
    { no: 4, name: "c_room_update", kind: "message", T: ClientRoomUpdate, oneof: "action" },
    { no: 5, name: "s_room_updated", kind: "message", T: ServerRoomUpdated, oneof: "action" },
    { no: 6, name: "s_room_update_failed", kind: "message", T: ServerRoomUpdateFailed, oneof: "action" },
    { no: 7, name: "c_room_flags_update", kind: "message", T: ClientRoomFlagsUpdate, oneof: "action" },
    { no: 8, name: "s_room_flags_updated", kind: "message", T: ServerRoomFlagsUpdated, oneof: "action" },
    { no: 9, name: "s_room_flags_update_failed", kind: "message", T: ServerRoomFlagsUpdateFailed, oneof: "action" },
    { no: 10, name: "c_room_delete", kind: "message", T: ClientRoomDelete, oneof: "action" },
    { no: 11, name: "s_room_deleted", kind: "message", T: ServerRoomDeleted, oneof: "action" },
    { no: 12, name: "c_join_room", kind: "message", T: ClientJoinRoom, oneof: "action" },
    { no: 13, name: "s_join_room_success", kind: "message", T: ServerJoinRoomSuccess, oneof: "action" },
    { no: 14, name: "s_join_room_failed", kind: "message", T: ServerJoinRoomFailed, oneof: "action" },
    { no: 15, name: "s_user_joined_room", kind: "message", T: ServerUserJoinedRoom, oneof: "action" },
    { no: 16, name: "c_leave_room", kind: "message", T: ClientLeaveRoom, oneof: "action" },
    { no: 17, name: "s_user_left_room", kind: "message", T: ServerUserLeftRoom, oneof: "action" },
    { no: 18, name: "c_kick_user", kind: "message", T: ClientKickUser, oneof: "action" },
    { no: 19, name: "s_user_kicked", kind: "message", T: ServerUserKicked, oneof: "action" },
    { no: 20, name: "c_ban_user", kind: "message", T: ClientBanUser, oneof: "action" },
    { no: 21, name: "s_user_banned", kind: "message", T: ServerUserBanned, oneof: "action" },
    { no: 22, name: "c_ready_state", kind: "message", T: ClientReadyState, oneof: "action" },
    { no: 23, name: "s_user_ready_state", kind: "message", T: ServerUserReadyState, oneof: "action" },
    { no: 24, name: "c_start_run", kind: "message", T: ClientStartRun, oneof: "action" },
    { no: 25, name: "s_host_start", kind: "message", T: ServerHostStart, oneof: "action" },
    { no: 27, name: "c_request_room_list", kind: "message", T: ClientRequestRoomList, oneof: "action" },
    { no: 28, name: "s_room_list", kind: "message", T: ServerRoomList, oneof: "action" },
    { no: 31, name: "s_disconnected", kind: "message", T: ServerDisconnected, oneof: "action" },
    { no: 32, name: "s_room_add_to_list", kind: "message", T: ServerRoomAddToList, oneof: "action" },
    { no: 33, name: "c_run_over", kind: "message", T: ClientRunOver, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LobbyAction {
    return new LobbyAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LobbyAction {
    return new LobbyAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LobbyAction {
    return new LobbyAction().fromJsonString(jsonString, options);
  }

  static equals(a: LobbyAction | PlainMessage<LobbyAction> | undefined, b: LobbyAction | PlainMessage<LobbyAction> | undefined): boolean {
    return proto3.util.equals(LobbyAction, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRunOver
 */
export class ClientRunOver extends Message<ClientRunOver> {
  /**
   * @generated from field: optional bool idk = 1;
   */
  idk?: boolean;

  constructor(data?: PartialMessage<ClientRunOver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRunOver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idk", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRunOver {
    return new ClientRunOver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRunOver {
    return new ClientRunOver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRunOver {
    return new ClientRunOver().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRunOver | PlainMessage<ClientRunOver> | undefined, b: ClientRunOver | PlainMessage<ClientRunOver> | undefined): boolean {
    return proto3.util.equals(ClientRunOver, a, b);
  }
}

/**
 * @generated from message NTALT.ServerDisconnected
 */
export class ServerDisconnected extends Message<ServerDisconnected> {
  /**
   * @generated from field: string reason = 1;
   */
  reason = "";

  constructor(data?: PartialMessage<ServerDisconnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerDisconnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerDisconnected {
    return new ServerDisconnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerDisconnected {
    return new ServerDisconnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerDisconnected {
    return new ServerDisconnected().fromJsonString(jsonString, options);
  }

  static equals(a: ServerDisconnected | PlainMessage<ServerDisconnected> | undefined, b: ServerDisconnected | PlainMessage<ServerDisconnected> | undefined): boolean {
    return proto3.util.equals(ServerDisconnected, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRoomDelete
 */
export class ClientRoomDelete extends Message<ClientRoomDelete> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ClientRoomDelete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRoomDelete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomDelete {
    return new ClientRoomDelete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomDelete {
    return new ClientRoomDelete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomDelete {
    return new ClientRoomDelete().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRoomDelete | PlainMessage<ClientRoomDelete> | undefined, b: ClientRoomDelete | PlainMessage<ClientRoomDelete> | undefined): boolean {
    return proto3.util.equals(ClientRoomDelete, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomDeleted
 */
export class ServerRoomDeleted extends Message<ServerRoomDeleted> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ServerRoomDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomDeleted {
    return new ServerRoomDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomDeleted {
    return new ServerRoomDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomDeleted {
    return new ServerRoomDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomDeleted | PlainMessage<ServerRoomDeleted> | undefined, b: ServerRoomDeleted | PlainMessage<ServerRoomDeleted> | undefined): boolean {
    return proto3.util.equals(ServerRoomDeleted, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRoomCreate
 */
export class ClientRoomCreate extends Message<ClientRoomCreate> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint32 gamemode = 2;
   */
  gamemode = 0;

  /**
   * @generated from field: uint32 max_users = 3;
   */
  maxUsers = 0;

  /**
   * @generated from field: optional string password = 4;
   */
  password?: string;

  constructor(data?: PartialMessage<ClientRoomCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRoomCreate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomCreate {
    return new ClientRoomCreate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomCreate {
    return new ClientRoomCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomCreate {
    return new ClientRoomCreate().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRoomCreate | PlainMessage<ClientRoomCreate> | undefined, b: ClientRoomCreate | PlainMessage<ClientRoomCreate> | undefined): boolean {
    return proto3.util.equals(ClientRoomCreate, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomCreated
 */
export class ServerRoomCreated extends Message<ServerRoomCreated> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode = 0;

  /**
   * @generated from field: uint32 max_users = 4;
   */
  maxUsers = 0;

  /**
   * @generated from field: optional string password = 5;
   */
  password?: string;

  /**
   * @generated from field: bool locked = 6;
   */
  locked = false;

  /**
   * @generated from field: repeated NTALT.ServerRoomCreated.User users = 7;
   */
  users: ServerRoomCreated_User[] = [];

  constructor(data?: PartialMessage<ServerRoomCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "users", kind: "message", T: ServerRoomCreated_User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomCreated {
    return new ServerRoomCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomCreated {
    return new ServerRoomCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomCreated {
    return new ServerRoomCreated().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomCreated | PlainMessage<ServerRoomCreated> | undefined, b: ServerRoomCreated | PlainMessage<ServerRoomCreated> | undefined): boolean {
    return proto3.util.equals(ServerRoomCreated, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomCreated.User
 */
export class ServerRoomCreated_User extends Message<ServerRoomCreated_User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool ready = 3;
   */
  ready = false;

  /**
   * @generated from field: bool owner = 4;
   */
  owner = false;

  constructor(data?: PartialMessage<ServerRoomCreated_User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomCreated.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "owner", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomCreated_User {
    return new ServerRoomCreated_User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomCreated_User {
    return new ServerRoomCreated_User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomCreated_User {
    return new ServerRoomCreated_User().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomCreated_User | PlainMessage<ServerRoomCreated_User> | undefined, b: ServerRoomCreated_User | PlainMessage<ServerRoomCreated_User> | undefined): boolean {
    return proto3.util.equals(ServerRoomCreated_User, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomCreateFailed
 */
export class ServerRoomCreateFailed extends Message<ServerRoomCreateFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason = "";

  constructor(data?: PartialMessage<ServerRoomCreateFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomCreateFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomCreateFailed {
    return new ServerRoomCreateFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomCreateFailed {
    return new ServerRoomCreateFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomCreateFailed {
    return new ServerRoomCreateFailed().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomCreateFailed | PlainMessage<ServerRoomCreateFailed> | undefined, b: ServerRoomCreateFailed | PlainMessage<ServerRoomCreateFailed> | undefined): boolean {
    return proto3.util.equals(ServerRoomCreateFailed, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRoomUpdate
 */
export class ClientRoomUpdate extends Message<ClientRoomUpdate> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional uint32 gamemode = 2;
   */
  gamemode?: number;

  /**
   * @generated from field: optional uint32 max_users = 3;
   */
  maxUsers?: number;

  /**
   * @generated from field: optional string password = 4;
   */
  password?: string;

  /**
   * @generated from field: optional bool locked = 5;
   */
  locked?: boolean;

  constructor(data?: PartialMessage<ClientRoomUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRoomUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomUpdate {
    return new ClientRoomUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomUpdate {
    return new ClientRoomUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomUpdate {
    return new ClientRoomUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRoomUpdate | PlainMessage<ClientRoomUpdate> | undefined, b: ClientRoomUpdate | PlainMessage<ClientRoomUpdate> | undefined): boolean {
    return proto3.util.equals(ClientRoomUpdate, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomUpdated
 */
export class ServerRoomUpdated extends Message<ServerRoomUpdated> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional uint32 gamemode = 2;
   */
  gamemode?: number;

  /**
   * @generated from field: optional uint32 max_users = 3;
   */
  maxUsers?: number;

  /**
   * @generated from field: optional string password = 4;
   */
  password?: string;

  /**
   * @generated from field: optional bool locked = 5;
   */
  locked?: boolean;

  constructor(data?: PartialMessage<ServerRoomUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomUpdated {
    return new ServerRoomUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomUpdated {
    return new ServerRoomUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomUpdated {
    return new ServerRoomUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomUpdated | PlainMessage<ServerRoomUpdated> | undefined, b: ServerRoomUpdated | PlainMessage<ServerRoomUpdated> | undefined): boolean {
    return proto3.util.equals(ServerRoomUpdated, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomUpdateFailed
 */
export class ServerRoomUpdateFailed extends Message<ServerRoomUpdateFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason = "";

  constructor(data?: PartialMessage<ServerRoomUpdateFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomUpdateFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomUpdateFailed {
    return new ServerRoomUpdateFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomUpdateFailed {
    return new ServerRoomUpdateFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomUpdateFailed {
    return new ServerRoomUpdateFailed().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomUpdateFailed | PlainMessage<ServerRoomUpdateFailed> | undefined, b: ServerRoomUpdateFailed | PlainMessage<ServerRoomUpdateFailed> | undefined): boolean {
    return proto3.util.equals(ServerRoomUpdateFailed, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRoomFlagsUpdate
 */
export class ClientRoomFlagsUpdate extends Message<ClientRoomFlagsUpdate> {
  /**
   * @generated from field: repeated NTALT.ClientRoomFlagsUpdate.GameFlag flags = 1;
   */
  flags: ClientRoomFlagsUpdate_GameFlag[] = [];

  constructor(data?: PartialMessage<ClientRoomFlagsUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRoomFlagsUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flags", kind: "message", T: ClientRoomFlagsUpdate_GameFlag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomFlagsUpdate {
    return new ClientRoomFlagsUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate {
    return new ClientRoomFlagsUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate {
    return new ClientRoomFlagsUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRoomFlagsUpdate | PlainMessage<ClientRoomFlagsUpdate> | undefined, b: ClientRoomFlagsUpdate | PlainMessage<ClientRoomFlagsUpdate> | undefined): boolean {
    return proto3.util.equals(ClientRoomFlagsUpdate, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRoomFlagsUpdate.GameFlag
 */
export class ClientRoomFlagsUpdate_GameFlag extends Message<ClientRoomFlagsUpdate_GameFlag> {
  /**
   * TODO: This seems like a hack, please improve it
   *
   * @generated from field: string flag = 1;
   */
  flag = "";

  /**
   * @generated from field: optional int32 int_val = 2;
   */
  intVal?: number;

  /**
   * @generated from field: optional string str_val = 3;
   */
  strVal?: string;

  /**
   * @generated from field: optional float float_val = 4;
   */
  floatVal?: number;

  /**
   * @generated from field: optional bool bool_val = 5;
   */
  boolVal?: boolean;

  /**
   * @generated from field: optional uint32 u_int_val = 6;
   */
  uIntVal?: number;

  constructor(data?: PartialMessage<ClientRoomFlagsUpdate_GameFlag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRoomFlagsUpdate.GameFlag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "int_val", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "str_val", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "float_val", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "bool_val", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "u_int_val", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRoomFlagsUpdate_GameFlag {
    return new ClientRoomFlagsUpdate_GameFlag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate_GameFlag {
    return new ClientRoomFlagsUpdate_GameFlag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRoomFlagsUpdate_GameFlag {
    return new ClientRoomFlagsUpdate_GameFlag().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRoomFlagsUpdate_GameFlag | PlainMessage<ClientRoomFlagsUpdate_GameFlag> | undefined, b: ClientRoomFlagsUpdate_GameFlag | PlainMessage<ClientRoomFlagsUpdate_GameFlag> | undefined): boolean {
    return proto3.util.equals(ClientRoomFlagsUpdate_GameFlag, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomFlagsUpdated
 */
export class ServerRoomFlagsUpdated extends Message<ServerRoomFlagsUpdated> {
  /**
   * @generated from field: repeated NTALT.ServerRoomFlagsUpdated.GameFlag flags = 1;
   */
  flags: ServerRoomFlagsUpdated_GameFlag[] = [];

  constructor(data?: PartialMessage<ServerRoomFlagsUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomFlagsUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flags", kind: "message", T: ServerRoomFlagsUpdated_GameFlag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomFlagsUpdated {
    return new ServerRoomFlagsUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated {
    return new ServerRoomFlagsUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated {
    return new ServerRoomFlagsUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomFlagsUpdated | PlainMessage<ServerRoomFlagsUpdated> | undefined, b: ServerRoomFlagsUpdated | PlainMessage<ServerRoomFlagsUpdated> | undefined): boolean {
    return proto3.util.equals(ServerRoomFlagsUpdated, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomFlagsUpdated.GameFlag
 */
export class ServerRoomFlagsUpdated_GameFlag extends Message<ServerRoomFlagsUpdated_GameFlag> {
  /**
   * @generated from field: string flag = 1;
   */
  flag = "";

  /**
   * @generated from field: optional int32 int_val = 2;
   */
  intVal?: number;

  /**
   * @generated from field: optional string str_val = 3;
   */
  strVal?: string;

  /**
   * @generated from field: optional float float_val = 4;
   */
  floatVal?: number;

  /**
   * @generated from field: optional bool bool_val = 5;
   */
  boolVal?: boolean;

  /**
   * @generated from field: optional uint32 u_int_val = 6;
   */
  uIntVal?: number;

  constructor(data?: PartialMessage<ServerRoomFlagsUpdated_GameFlag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomFlagsUpdated.GameFlag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "int_val", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "str_val", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "float_val", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "bool_val", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "u_int_val", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomFlagsUpdated_GameFlag {
    return new ServerRoomFlagsUpdated_GameFlag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated_GameFlag {
    return new ServerRoomFlagsUpdated_GameFlag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdated_GameFlag {
    return new ServerRoomFlagsUpdated_GameFlag().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomFlagsUpdated_GameFlag | PlainMessage<ServerRoomFlagsUpdated_GameFlag> | undefined, b: ServerRoomFlagsUpdated_GameFlag | PlainMessage<ServerRoomFlagsUpdated_GameFlag> | undefined): boolean {
    return proto3.util.equals(ServerRoomFlagsUpdated_GameFlag, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomFlagsUpdateFailed
 */
export class ServerRoomFlagsUpdateFailed extends Message<ServerRoomFlagsUpdateFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason = "";

  constructor(data?: PartialMessage<ServerRoomFlagsUpdateFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomFlagsUpdateFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomFlagsUpdateFailed {
    return new ServerRoomFlagsUpdateFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdateFailed {
    return new ServerRoomFlagsUpdateFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomFlagsUpdateFailed {
    return new ServerRoomFlagsUpdateFailed().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomFlagsUpdateFailed | PlainMessage<ServerRoomFlagsUpdateFailed> | undefined, b: ServerRoomFlagsUpdateFailed | PlainMessage<ServerRoomFlagsUpdateFailed> | undefined): boolean {
    return proto3.util.equals(ServerRoomFlagsUpdateFailed, a, b);
  }
}

/**
 * @generated from message NTALT.ClientJoinRoom
 */
export class ClientJoinRoom extends Message<ClientJoinRoom> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string password = 2;
   */
  password?: string;

  constructor(data?: PartialMessage<ClientJoinRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientJoinRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientJoinRoom {
    return new ClientJoinRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientJoinRoom {
    return new ClientJoinRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientJoinRoom {
    return new ClientJoinRoom().fromJsonString(jsonString, options);
  }

  static equals(a: ClientJoinRoom | PlainMessage<ClientJoinRoom> | undefined, b: ClientJoinRoom | PlainMessage<ClientJoinRoom> | undefined): boolean {
    return proto3.util.equals(ClientJoinRoom, a, b);
  }
}

/**
 * @generated from message NTALT.ServerJoinRoomSuccess
 */
export class ServerJoinRoomSuccess extends Message<ServerJoinRoomSuccess> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode = 0;

  /**
   * @generated from field: uint32 max_users = 4;
   */
  maxUsers = 0;

  /**
   * @generated from field: optional string password = 5;
   */
  password?: string;

  /**
   * @generated from field: bool locked = 6;
   */
  locked = false;

  /**
   * @generated from field: repeated NTALT.ServerJoinRoomSuccess.User users = 7;
   */
  users: ServerJoinRoomSuccess_User[] = [];

  constructor(data?: PartialMessage<ServerJoinRoomSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerJoinRoomSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "users", kind: "message", T: ServerJoinRoomSuccess_User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerJoinRoomSuccess {
    return new ServerJoinRoomSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess {
    return new ServerJoinRoomSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess {
    return new ServerJoinRoomSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: ServerJoinRoomSuccess | PlainMessage<ServerJoinRoomSuccess> | undefined, b: ServerJoinRoomSuccess | PlainMessage<ServerJoinRoomSuccess> | undefined): boolean {
    return proto3.util.equals(ServerJoinRoomSuccess, a, b);
  }
}

/**
 * @generated from message NTALT.ServerJoinRoomSuccess.User
 */
export class ServerJoinRoomSuccess_User extends Message<ServerJoinRoomSuccess_User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool ready = 3;
   */
  ready = false;

  /**
   * @generated from field: bool owner = 4;
   */
  owner = false;

  constructor(data?: PartialMessage<ServerJoinRoomSuccess_User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerJoinRoomSuccess.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "owner", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerJoinRoomSuccess_User {
    return new ServerJoinRoomSuccess_User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess_User {
    return new ServerJoinRoomSuccess_User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerJoinRoomSuccess_User {
    return new ServerJoinRoomSuccess_User().fromJsonString(jsonString, options);
  }

  static equals(a: ServerJoinRoomSuccess_User | PlainMessage<ServerJoinRoomSuccess_User> | undefined, b: ServerJoinRoomSuccess_User | PlainMessage<ServerJoinRoomSuccess_User> | undefined): boolean {
    return proto3.util.equals(ServerJoinRoomSuccess_User, a, b);
  }
}

/**
 * @generated from message NTALT.ServerJoinRoomFailed
 */
export class ServerJoinRoomFailed extends Message<ServerJoinRoomFailed> {
  /**
   * @generated from field: string reason = 1;
   */
  reason = "";

  constructor(data?: PartialMessage<ServerJoinRoomFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerJoinRoomFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerJoinRoomFailed {
    return new ServerJoinRoomFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerJoinRoomFailed {
    return new ServerJoinRoomFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerJoinRoomFailed {
    return new ServerJoinRoomFailed().fromJsonString(jsonString, options);
  }

  static equals(a: ServerJoinRoomFailed | PlainMessage<ServerJoinRoomFailed> | undefined, b: ServerJoinRoomFailed | PlainMessage<ServerJoinRoomFailed> | undefined): boolean {
    return proto3.util.equals(ServerJoinRoomFailed, a, b);
  }
}

/**
 * @generated from message NTALT.ServerUserJoinedRoom
 */
export class ServerUserJoinedRoom extends Message<ServerUserJoinedRoom> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ServerUserJoinedRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerUserJoinedRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserJoinedRoom {
    return new ServerUserJoinedRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserJoinedRoom {
    return new ServerUserJoinedRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserJoinedRoom {
    return new ServerUserJoinedRoom().fromJsonString(jsonString, options);
  }

  static equals(a: ServerUserJoinedRoom | PlainMessage<ServerUserJoinedRoom> | undefined, b: ServerUserJoinedRoom | PlainMessage<ServerUserJoinedRoom> | undefined): boolean {
    return proto3.util.equals(ServerUserJoinedRoom, a, b);
  }
}

/**
 * @generated from message NTALT.ClientLeaveRoom
 */
export class ClientLeaveRoom extends Message<ClientLeaveRoom> {
  /**
   * should be empty msg
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ClientLeaveRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientLeaveRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientLeaveRoom {
    return new ClientLeaveRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientLeaveRoom {
    return new ClientLeaveRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientLeaveRoom {
    return new ClientLeaveRoom().fromJsonString(jsonString, options);
  }

  static equals(a: ClientLeaveRoom | PlainMessage<ClientLeaveRoom> | undefined, b: ClientLeaveRoom | PlainMessage<ClientLeaveRoom> | undefined): boolean {
    return proto3.util.equals(ClientLeaveRoom, a, b);
  }
}

/**
 * @generated from message NTALT.ServerUserLeftRoom
 */
export class ServerUserLeftRoom extends Message<ServerUserLeftRoom> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ServerUserLeftRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerUserLeftRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserLeftRoom {
    return new ServerUserLeftRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserLeftRoom {
    return new ServerUserLeftRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserLeftRoom {
    return new ServerUserLeftRoom().fromJsonString(jsonString, options);
  }

  static equals(a: ServerUserLeftRoom | PlainMessage<ServerUserLeftRoom> | undefined, b: ServerUserLeftRoom | PlainMessage<ServerUserLeftRoom> | undefined): boolean {
    return proto3.util.equals(ServerUserLeftRoom, a, b);
  }
}

/**
 * @generated from message NTALT.ClientKickUser
 */
export class ClientKickUser extends Message<ClientKickUser> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ClientKickUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientKickUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientKickUser {
    return new ClientKickUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientKickUser {
    return new ClientKickUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientKickUser {
    return new ClientKickUser().fromJsonString(jsonString, options);
  }

  static equals(a: ClientKickUser | PlainMessage<ClientKickUser> | undefined, b: ClientKickUser | PlainMessage<ClientKickUser> | undefined): boolean {
    return proto3.util.equals(ClientKickUser, a, b);
  }
}

/**
 * @generated from message NTALT.ServerUserKicked
 */
export class ServerUserKicked extends Message<ServerUserKicked> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ServerUserKicked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerUserKicked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserKicked {
    return new ServerUserKicked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserKicked {
    return new ServerUserKicked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserKicked {
    return new ServerUserKicked().fromJsonString(jsonString, options);
  }

  static equals(a: ServerUserKicked | PlainMessage<ServerUserKicked> | undefined, b: ServerUserKicked | PlainMessage<ServerUserKicked> | undefined): boolean {
    return proto3.util.equals(ServerUserKicked, a, b);
  }
}

/**
 * @generated from message NTALT.ClientBanUser
 */
export class ClientBanUser extends Message<ClientBanUser> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ClientBanUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientBanUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientBanUser {
    return new ClientBanUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientBanUser {
    return new ClientBanUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientBanUser {
    return new ClientBanUser().fromJsonString(jsonString, options);
  }

  static equals(a: ClientBanUser | PlainMessage<ClientBanUser> | undefined, b: ClientBanUser | PlainMessage<ClientBanUser> | undefined): boolean {
    return proto3.util.equals(ClientBanUser, a, b);
  }
}

/**
 * @generated from message NTALT.ServerUserBanned
 */
export class ServerUserBanned extends Message<ServerUserBanned> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ServerUserBanned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerUserBanned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserBanned {
    return new ServerUserBanned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserBanned {
    return new ServerUserBanned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserBanned {
    return new ServerUserBanned().fromJsonString(jsonString, options);
  }

  static equals(a: ServerUserBanned | PlainMessage<ServerUserBanned> | undefined, b: ServerUserBanned | PlainMessage<ServerUserBanned> | undefined): boolean {
    return proto3.util.equals(ServerUserBanned, a, b);
  }
}

/**
 * @generated from message NTALT.ClientReadyState
 */
export class ClientReadyState extends Message<ClientReadyState> {
  /**
   * @generated from field: bool ready = 1;
   */
  ready = false;

  /**
   * @generated from field: optional string seed = 2;
   */
  seed?: string;

  /**
   * @generated from field: repeated string mods = 3;
   */
  mods: string[] = [];

  /**
   * @generated from field: optional string version = 4;
   */
  version?: string;

  /**
   * @generated from field: optional bool beta = 5;
   */
  beta?: boolean;

  constructor(data?: PartialMessage<ClientReadyState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientReadyState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "seed", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "mods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "beta", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientReadyState {
    return new ClientReadyState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientReadyState {
    return new ClientReadyState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientReadyState {
    return new ClientReadyState().fromJsonString(jsonString, options);
  }

  static equals(a: ClientReadyState | PlainMessage<ClientReadyState> | undefined, b: ClientReadyState | PlainMessage<ClientReadyState> | undefined): boolean {
    return proto3.util.equals(ClientReadyState, a, b);
  }
}

/**
 * @generated from message NTALT.ServerUserReadyState
 */
export class ServerUserReadyState extends Message<ServerUserReadyState> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: bool ready = 2;
   */
  ready = false;

  /**
   * @generated from field: optional string seed = 3;
   */
  seed?: string;

  /**
   * @generated from field: repeated string mods = 4;
   */
  mods: string[] = [];

  /**
   * @generated from field: optional string version = 5;
   */
  version?: string;

  /**
   * @generated from field: optional bool beta = 6;
   */
  beta?: boolean;

  constructor(data?: PartialMessage<ServerUserReadyState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerUserReadyState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "seed", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "mods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "beta", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerUserReadyState {
    return new ServerUserReadyState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerUserReadyState {
    return new ServerUserReadyState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerUserReadyState {
    return new ServerUserReadyState().fromJsonString(jsonString, options);
  }

  static equals(a: ServerUserReadyState | PlainMessage<ServerUserReadyState> | undefined, b: ServerUserReadyState | PlainMessage<ServerUserReadyState> | undefined): boolean {
    return proto3.util.equals(ServerUserReadyState, a, b);
  }
}

/**
 * @generated from message NTALT.ClientStartRun
 */
export class ClientStartRun extends Message<ClientStartRun> {
  /**
   * @generated from field: bool forced = 1;
   */
  forced = false;

  constructor(data?: PartialMessage<ClientStartRun>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientStartRun";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forced", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStartRun {
    return new ClientStartRun().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStartRun {
    return new ClientStartRun().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStartRun {
    return new ClientStartRun().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStartRun | PlainMessage<ClientStartRun> | undefined, b: ClientStartRun | PlainMessage<ClientStartRun> | undefined): boolean {
    return proto3.util.equals(ClientStartRun, a, b);
  }
}

/**
 * @generated from message NTALT.ServerHostStart
 */
export class ServerHostStart extends Message<ServerHostStart> {
  /**
   * @generated from field: bool forced = 1;
   */
  forced = false;

  constructor(data?: PartialMessage<ServerHostStart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerHostStart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forced", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerHostStart {
    return new ServerHostStart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerHostStart {
    return new ServerHostStart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerHostStart {
    return new ServerHostStart().fromJsonString(jsonString, options);
  }

  static equals(a: ServerHostStart | PlainMessage<ServerHostStart> | undefined, b: ServerHostStart | PlainMessage<ServerHostStart> | undefined): boolean {
    return proto3.util.equals(ServerHostStart, a, b);
  }
}

/**
 * @generated from message NTALT.ClientRequestRoomList
 */
export class ClientRequestRoomList extends Message<ClientRequestRoomList> {
  /**
   * @generated from field: uint32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ClientRequestRoomList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ClientRequestRoomList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRequestRoomList {
    return new ClientRequestRoomList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRequestRoomList {
    return new ClientRequestRoomList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRequestRoomList {
    return new ClientRequestRoomList().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRequestRoomList | PlainMessage<ClientRequestRoomList> | undefined, b: ClientRequestRoomList | PlainMessage<ClientRequestRoomList> | undefined): boolean {
    return proto3.util.equals(ClientRequestRoomList, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomList
 */
export class ServerRoomList extends Message<ServerRoomList> {
  /**
   * @generated from field: repeated NTALT.ServerRoomList.Room rooms = 1;
   */
  rooms: ServerRoomList_Room[] = [];

  /**
   * @generated from field: optional uint32 pages = 2;
   */
  pages?: number;

  constructor(data?: PartialMessage<ServerRoomList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rooms", kind: "message", T: ServerRoomList_Room, repeated: true },
    { no: 2, name: "pages", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomList {
    return new ServerRoomList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomList {
    return new ServerRoomList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomList {
    return new ServerRoomList().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomList | PlainMessage<ServerRoomList> | undefined, b: ServerRoomList | PlainMessage<ServerRoomList> | undefined): boolean {
    return proto3.util.equals(ServerRoomList, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomList.Room
 */
export class ServerRoomList_Room extends Message<ServerRoomList_Room> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode = 0;

  /**
   * @generated from field: uint32 cur_users = 4;
   */
  curUsers = 0;

  /**
   * @generated from field: uint32 max_users = 5;
   */
  maxUsers = 0;

  /**
   * @generated from field: bool protected = 6;
   */
  protected = false;

  /**
   * @generated from field: string owner = 7;
   */
  owner = "";

  /**
   * @generated from field: bool locked = 8;
   */
  locked = false;

  constructor(data?: PartialMessage<ServerRoomList_Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomList.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "cur_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "protected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomList_Room {
    return new ServerRoomList_Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomList_Room {
    return new ServerRoomList_Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomList_Room {
    return new ServerRoomList_Room().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomList_Room | PlainMessage<ServerRoomList_Room> | undefined, b: ServerRoomList_Room | PlainMessage<ServerRoomList_Room> | undefined): boolean {
    return proto3.util.equals(ServerRoomList_Room, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomAddToList
 */
export class ServerRoomAddToList extends Message<ServerRoomAddToList> {
  /**
   * @generated from field: NTALT.ServerRoomAddToList.Room room = 1;
   */
  room?: ServerRoomAddToList_Room;

  constructor(data?: PartialMessage<ServerRoomAddToList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomAddToList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "message", T: ServerRoomAddToList_Room },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomAddToList {
    return new ServerRoomAddToList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomAddToList {
    return new ServerRoomAddToList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomAddToList {
    return new ServerRoomAddToList().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomAddToList | PlainMessage<ServerRoomAddToList> | undefined, b: ServerRoomAddToList | PlainMessage<ServerRoomAddToList> | undefined): boolean {
    return proto3.util.equals(ServerRoomAddToList, a, b);
  }
}

/**
 * @generated from message NTALT.ServerRoomAddToList.Room
 */
export class ServerRoomAddToList_Room extends Message<ServerRoomAddToList_Room> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 gamemode = 3;
   */
  gamemode = 0;

  /**
   * @generated from field: uint32 cur_users = 4;
   */
  curUsers = 0;

  /**
   * @generated from field: uint32 max_users = 5;
   */
  maxUsers = 0;

  /**
   * @generated from field: bool protected = 6;
   */
  protected = false;

  /**
   * @generated from field: string owner = 7;
   */
  owner = "";

  /**
   * @generated from field: bool locked = 8;
   */
  locked = false;

  constructor(data?: PartialMessage<ServerRoomAddToList_Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NTALT.ServerRoomAddToList.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gamemode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "cur_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "max_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "protected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerRoomAddToList_Room {
    return new ServerRoomAddToList_Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerRoomAddToList_Room {
    return new ServerRoomAddToList_Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerRoomAddToList_Room {
    return new ServerRoomAddToList_Room().fromJsonString(jsonString, options);
  }

  static equals(a: ServerRoomAddToList_Room | PlainMessage<ServerRoomAddToList_Room> | undefined, b: ServerRoomAddToList_Room | PlainMessage<ServerRoomAddToList_Room> | undefined): boolean {
    return proto3.util.equals(ServerRoomAddToList_Room, a, b);
  }
}

